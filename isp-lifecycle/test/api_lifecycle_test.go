/*
Channel Lifecycle State API

Testing LifecycleApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package isp

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/istreamlabs/go-sdk/isp-lifecycle"
)

func Test_isp_LifecycleApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LifecycleApiService CalculateLifecycleState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.LifecycleApi.CalculateLifecycleState(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LifecycleApiService GetLifecycleComponentState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var org string
		var channelId string
		var component string

		resp, httpRes, err := apiClient.LifecycleApi.GetLifecycleComponentState(context.Background(), org, channelId, component).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LifecycleApiService ListLifecycleComponentStates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.LifecycleApi.ListLifecycleComponentStates(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LifecycleApiService PutLifecycleComponentState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelUrn string
		var component string

		httpRes, err := apiClient.LifecycleApi.PutLifecycleComponentState(context.Background(), channelUrn, component).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
