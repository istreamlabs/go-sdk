/*
Channel Lifecycle State API

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package isp

import (
	"context"
	"testing"

	openapiclient "github.com/istreamlabs/go-sdk/isp-lifecycle"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_isp_DefaultApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultApiService CalculateLifecycleState", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org interface{}
		var channelId interface{}

		resp, httpRes, err := apiClient.DefaultApi.CalculateLifecycleState(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetLifecycleComponentState", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org interface{}
		var channelId interface{}
		var component interface{}

		resp, httpRes, err := apiClient.DefaultApi.GetLifecycleComponentState(context.Background(), org, channelId, component).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PutLifecycleComponentState", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelUrn interface{}
		var component interface{}

		httpRes, err := apiClient.DefaultApi.PutLifecycleComponentState(context.Background(), channelUrn, component).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
