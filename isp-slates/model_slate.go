/*
 * iStreamPlanet Slate Management API
 *
 * API version: 1.0.0
 * Contact: support@istreamplanet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// checks if the Slate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Slate{}

// Slate struct for Slate
type Slate struct {
	// An optional URL to a JSON Schema document describing this resource
	Schema *string `json:"$schema,omitempty" format:"uri" doc:"An optional URL to a JSON Schema document describing this resource"`
	// A friendly slate description.
	Description string `json:"description" doc:"A friendly slate description."`
	// Unique identifier for this slate
	Id string `json:"id" doc:"Unique identifier for this slate"`
	// The url where the slate can be accessed.
	Url string `json:"url" doc:"The url where the slate can be accessed."`
}

// NewSlate instantiates a new Slate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlate(description string, id string, url string) *Slate {
	this := Slate{}
	this.Description = description
	this.Id = id
	this.Url = url
	return &this
}

// NewSlateWithDefaults instantiates a new Slate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlateWithDefaults() *Slate {
	this := Slate{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *Slate) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Slate) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *Slate) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *Slate) SetSchema(v string) {
	o.Schema = &v
}

// GetDescription returns the Description field value
func (o *Slate) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Slate) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Slate) SetDescription(v string) {
	o.Description = v
}

// GetId returns the Id field value
func (o *Slate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Slate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Slate) SetId(v string) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *Slate) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Slate) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Slate) SetUrl(v string) {
	o.Url = v
}

func (o Slate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Slate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["$schema"] = o.Schema
	}
	toSerialize["description"] = o.Description
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

type NullableSlate struct {
	value *Slate
	isSet bool
}

func (v NullableSlate) Get() *Slate {
	return v.value
}

func (v *NullableSlate) Set(val *Slate) {
	v.value = val
	v.isSet = true
}

func (v NullableSlate) IsSet() bool {
	return v.isSet
}

func (v *NullableSlate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlate(val *Slate) *NullableSlate {
	return &NullableSlate{value: val, isSet: true}
}

func (v NullableSlate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


