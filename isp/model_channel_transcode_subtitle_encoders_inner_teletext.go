/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 * Contact: support@istreamplanet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// checks if the ChannelTranscodeSubtitleEncodersInnerTeletext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelTranscodeSubtitleEncodersInnerTeletext{}

// ChannelTranscodeSubtitleEncodersInnerTeletext Extract subtitles from an embedded Teletext stream. The teletext PID is determined automatically. Only one of ['teletext', 'atsc_captions'] may be set.
type ChannelTranscodeSubtitleEncodersInnerTeletext struct {
	// The teletext magazine number where the subtitles are found.
	Magazine *int32 `json:"magazine,omitempty"`
	// The teletext page number where the subtitles are found.
	Page *int32 `json:"page,omitempty"`
}

// NewChannelTranscodeSubtitleEncodersInnerTeletext instantiates a new ChannelTranscodeSubtitleEncodersInnerTeletext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelTranscodeSubtitleEncodersInnerTeletext() *ChannelTranscodeSubtitleEncodersInnerTeletext {
	this := ChannelTranscodeSubtitleEncodersInnerTeletext{}
	return &this
}

// NewChannelTranscodeSubtitleEncodersInnerTeletextWithDefaults instantiates a new ChannelTranscodeSubtitleEncodersInnerTeletext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelTranscodeSubtitleEncodersInnerTeletextWithDefaults() *ChannelTranscodeSubtitleEncodersInnerTeletext {
	this := ChannelTranscodeSubtitleEncodersInnerTeletext{}
	return &this
}

// GetMagazine returns the Magazine field value if set, zero value otherwise.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) GetMagazine() int32 {
	if o == nil || IsNil(o.Magazine) {
		var ret int32
		return ret
	}
	return *o.Magazine
}

// GetMagazineOk returns a tuple with the Magazine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) GetMagazineOk() (*int32, bool) {
	if o == nil || IsNil(o.Magazine) {
		return nil, false
	}
	return o.Magazine, true
}

// HasMagazine returns a boolean if a field has been set.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) HasMagazine() bool {
	if o != nil && !IsNil(o.Magazine) {
		return true
	}

	return false
}

// SetMagazine gets a reference to the given int32 and assigns it to the Magazine field.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) SetMagazine(v int32) {
	o.Magazine = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) GetPage() int32 {
	if o == nil || IsNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) GetPageOk() (*int32, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) SetPage(v int32) {
	o.Page = &v
}

func (o ChannelTranscodeSubtitleEncodersInnerTeletext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelTranscodeSubtitleEncodersInnerTeletext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Magazine) {
		toSerialize["magazine"] = o.Magazine
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	return toSerialize, nil
}

type NullableChannelTranscodeSubtitleEncodersInnerTeletext struct {
	value *ChannelTranscodeSubtitleEncodersInnerTeletext
	isSet bool
}

func (v NullableChannelTranscodeSubtitleEncodersInnerTeletext) Get() *ChannelTranscodeSubtitleEncodersInnerTeletext {
	return v.value
}

func (v *NullableChannelTranscodeSubtitleEncodersInnerTeletext) Set(val *ChannelTranscodeSubtitleEncodersInnerTeletext) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelTranscodeSubtitleEncodersInnerTeletext) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelTranscodeSubtitleEncodersInnerTeletext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelTranscodeSubtitleEncodersInnerTeletext(val *ChannelTranscodeSubtitleEncodersInnerTeletext) *NullableChannelTranscodeSubtitleEncodersInnerTeletext {
	return &NullableChannelTranscodeSubtitleEncodersInnerTeletext{value: val, isSet: true}
}

func (v NullableChannelTranscodeSubtitleEncodersInnerTeletext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelTranscodeSubtitleEncodersInnerTeletext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


