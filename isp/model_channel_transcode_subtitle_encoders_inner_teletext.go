/*
 * WBD Aventus Channels API
 *
 * API version: v1.19.22
 * Contact: live-control-plane-devs@wbd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// checks if the ChannelTranscodeSubtitleEncodersInnerTeletext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelTranscodeSubtitleEncodersInnerTeletext{}

// ChannelTranscodeSubtitleEncodersInnerTeletext Extract subtitles from an embedded Teletext stream. The teletext PID is determined automatically. Only one of ['teletext', 'atsc_captions'] may be set.
type ChannelTranscodeSubtitleEncodersInnerTeletext struct {
	// If set, forces interpretation of the National Option field to choose from character sets in this specific set of character sets. Determining the correct value for this configuration is non-trivial, but there are some guidelines. Usually, all languages in one Teletext stream will use the same charset set. If only one set can handle all the languages, it's probably that one. Some of the sets roughly correspond to geopolitical divisions from the Cold War era: SET3 is roughly Yugoslavia plus Romania; SET4 is the rest of the former USSR/Warsaw Pact, including East Germany but excluding Poland; SET8 is Africa; SET10 is the Middle East. There does not seem to be any standard name for this configuration. The standard calls it 'the upper four bits of Triplet 1', which is highly ambiguous and nonsensical outside of the context of that usage. The decoder ffmpeg uses calls it 'region', but most of the sets cannot cleanly be described as any particular geographic region.
	CharsetSet *string `json:"charset_set,omitempty" enum:"SET0,SET1,SET2,SET3,SET4,SET6,SET8,SET10" doc:"If set, forces interpretation of the National Option field to choose from character sets in this specific set of character sets. Determining the correct value for this configuration is non-trivial, but there are some guidelines. Usually, all languages in one Teletext stream will use the same charset set. If only one set can handle all the languages, it's probably that one. Some of the sets roughly correspond to geopolitical divisions from the Cold War era: SET3 is roughly Yugoslavia plus Romania; SET4 is the rest of the former USSR/Warsaw Pact, including East Germany but excluding Poland; SET8 is Africa; SET10 is the Middle East. There does not seem to be any standard name for this configuration. The standard calls it 'the upper four bits of Triplet 1', which is highly ambiguous and nonsensical outside of the context of that usage. The decoder ffmpeg uses calls it 'region', but most of the sets cannot cleanly be described as any particular geographic region."`
	// The three-letter language code declared in the Teletext descriptor in the source PMT. If the language is not found, the subtitles will be empty. language + type configuration is mutually exclusive with magazine + page configuration.
	Language *string `json:"language,omitempty" doc:"The three-letter language code declared in the Teletext descriptor in the source PMT. If the language is not found, the subtitles will be empty. language + type configuration is mutually exclusive with magazine + page configuration."`
	// The teletext magazine number where the subtitles are found. magazine + page configuration is mutually exclusive with language + type configuration.
	Magazine *int32 `json:"magazine,omitempty" format:"int32" minimum:"0" doc:"The teletext magazine number where the subtitles are found. magazine + page configuration is mutually exclusive with language + type configuration."`
	// The teletext page number where the subtitles are found. magazine + page configuration is mutually exclusive with language + type configuration.
	Page *int32 `json:"page,omitempty" format:"int32" minimum:"0" doc:"The teletext page number where the subtitles are found. magazine + page configuration is mutually exclusive with language + type configuration."`
	// The Teletext page type declared in the Teletext descriptor in the source PMT. If this field is unset, it will be inferred from the 'usage' field on the SubtitleEncoder using this table: SubtitleEncoder.CLOSED_CAPTIONS => TeletextSource.PAGE_TYPE_SUBTITLE_HEARING_IMPAIRED SubtitleEncoder.SUBTITLES => TeletextSource.PAGE_TYPE_SUBTITLE
	PageType *string `json:"page_type,omitempty" enum:"PAGE_TYPE_INITIAL,PAGE_TYPE_SUBTITLE,PAGE_TYPE_ADDITIONAL_INFORMATION,PAGE_TYPE_PROGRAMME_SCHEDULE,PAGE_TYPE_SUBTITLE_HEARING_IMPAIRED" doc:"The Teletext page type declared in the Teletext descriptor in the source PMT. If this field is unset, it will be inferred from the 'usage' field on the SubtitleEncoder using this table: SubtitleEncoder.CLOSED_CAPTIONS => TeletextSource.PAGE_TYPE_SUBTITLE_HEARING_IMPAIRED SubtitleEncoder.SUBTITLES => TeletextSource.PAGE_TYPE_SUBTITLE"`
}

// NewChannelTranscodeSubtitleEncodersInnerTeletext instantiates a new ChannelTranscodeSubtitleEncodersInnerTeletext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelTranscodeSubtitleEncodersInnerTeletext() *ChannelTranscodeSubtitleEncodersInnerTeletext {
	this := ChannelTranscodeSubtitleEncodersInnerTeletext{}
	return &this
}

// NewChannelTranscodeSubtitleEncodersInnerTeletextWithDefaults instantiates a new ChannelTranscodeSubtitleEncodersInnerTeletext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelTranscodeSubtitleEncodersInnerTeletextWithDefaults() *ChannelTranscodeSubtitleEncodersInnerTeletext {
	this := ChannelTranscodeSubtitleEncodersInnerTeletext{}
	return &this
}

// GetCharsetSet returns the CharsetSet field value if set, zero value otherwise.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) GetCharsetSet() string {
	if o == nil || IsNil(o.CharsetSet) {
		var ret string
		return ret
	}
	return *o.CharsetSet
}

// GetCharsetSetOk returns a tuple with the CharsetSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) GetCharsetSetOk() (*string, bool) {
	if o == nil || IsNil(o.CharsetSet) {
		return nil, false
	}
	return o.CharsetSet, true
}

// HasCharsetSet returns a boolean if a field has been set.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) HasCharsetSet() bool {
	if o != nil && !IsNil(o.CharsetSet) {
		return true
	}

	return false
}

// SetCharsetSet gets a reference to the given string and assigns it to the CharsetSet field.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) SetCharsetSet(v string) {
	o.CharsetSet = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) SetLanguage(v string) {
	o.Language = &v
}

// GetMagazine returns the Magazine field value if set, zero value otherwise.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) GetMagazine() int32 {
	if o == nil || IsNil(o.Magazine) {
		var ret int32
		return ret
	}
	return *o.Magazine
}

// GetMagazineOk returns a tuple with the Magazine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) GetMagazineOk() (*int32, bool) {
	if o == nil || IsNil(o.Magazine) {
		return nil, false
	}
	return o.Magazine, true
}

// HasMagazine returns a boolean if a field has been set.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) HasMagazine() bool {
	if o != nil && !IsNil(o.Magazine) {
		return true
	}

	return false
}

// SetMagazine gets a reference to the given int32 and assigns it to the Magazine field.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) SetMagazine(v int32) {
	o.Magazine = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) GetPage() int32 {
	if o == nil || IsNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) GetPageOk() (*int32, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) SetPage(v int32) {
	o.Page = &v
}

// GetPageType returns the PageType field value if set, zero value otherwise.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) GetPageType() string {
	if o == nil || IsNil(o.PageType) {
		var ret string
		return ret
	}
	return *o.PageType
}

// GetPageTypeOk returns a tuple with the PageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) GetPageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PageType) {
		return nil, false
	}
	return o.PageType, true
}

// HasPageType returns a boolean if a field has been set.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) HasPageType() bool {
	if o != nil && !IsNil(o.PageType) {
		return true
	}

	return false
}

// SetPageType gets a reference to the given string and assigns it to the PageType field.
func (o *ChannelTranscodeSubtitleEncodersInnerTeletext) SetPageType(v string) {
	o.PageType = &v
}

func (o ChannelTranscodeSubtitleEncodersInnerTeletext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelTranscodeSubtitleEncodersInnerTeletext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CharsetSet) {
		toSerialize["charset_set"] = o.CharsetSet
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Magazine) {
		toSerialize["magazine"] = o.Magazine
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.PageType) {
		toSerialize["page_type"] = o.PageType
	}
	return toSerialize, nil
}

type NullableChannelTranscodeSubtitleEncodersInnerTeletext struct {
	value *ChannelTranscodeSubtitleEncodersInnerTeletext
	isSet bool
}

func (v NullableChannelTranscodeSubtitleEncodersInnerTeletext) Get() *ChannelTranscodeSubtitleEncodersInnerTeletext {
	return v.value
}

func (v *NullableChannelTranscodeSubtitleEncodersInnerTeletext) Set(val *ChannelTranscodeSubtitleEncodersInnerTeletext) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelTranscodeSubtitleEncodersInnerTeletext) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelTranscodeSubtitleEncodersInnerTeletext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelTranscodeSubtitleEncodersInnerTeletext(val *ChannelTranscodeSubtitleEncodersInnerTeletext) *NullableChannelTranscodeSubtitleEncodersInnerTeletext {
	return &NullableChannelTranscodeSubtitleEncodersInnerTeletext{value: val, isSet: true}
}

func (v NullableChannelTranscodeSubtitleEncodersInnerTeletext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelTranscodeSubtitleEncodersInnerTeletext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


