/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 * Contact: support@istreamplanet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// ChannelPublishingPublishPoints struct for ChannelPublishingPublishPoints
type ChannelPublishingPublishPoints struct {
	Http *ChannelPublishingHttp `json:"http,omitempty"`
	// uniquely identifies this publish_point within a channel configuration. Can be referenced by other publish_points in the 'playlist_only_for' field.
	Id *string `json:"id,omitempty"`
	// playlist_only_for identifies the id of the publish_point that has the segments for this publish_point, which is only publishing a playlist for those segments. All publish_points within a publication must either have 'playlist_only_for' all set or all not set.
	PlaylistOnlyFor *string `json:"playlist_only_for,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChannelPublishingPublishPoints ChannelPublishingPublishPoints

// NewChannelPublishingPublishPoints instantiates a new ChannelPublishingPublishPoints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelPublishingPublishPoints() *ChannelPublishingPublishPoints {
	this := ChannelPublishingPublishPoints{}
	return &this
}

// NewChannelPublishingPublishPointsWithDefaults instantiates a new ChannelPublishingPublishPoints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelPublishingPublishPointsWithDefaults() *ChannelPublishingPublishPoints {
	this := ChannelPublishingPublishPoints{}
	return &this
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *ChannelPublishingPublishPoints) GetHttp() ChannelPublishingHttp {
	if o == nil || o.Http == nil {
		var ret ChannelPublishingHttp
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublishPoints) GetHttpOk() (*ChannelPublishingHttp, bool) {
	if o == nil || o.Http == nil {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *ChannelPublishingPublishPoints) HasHttp() bool {
	if o != nil && o.Http != nil {
		return true
	}

	return false
}

// SetHttp gets a reference to the given ChannelPublishingHttp and assigns it to the Http field.
func (o *ChannelPublishingPublishPoints) SetHttp(v ChannelPublishingHttp) {
	o.Http = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChannelPublishingPublishPoints) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublishPoints) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChannelPublishingPublishPoints) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ChannelPublishingPublishPoints) SetId(v string) {
	o.Id = &v
}

// GetPlaylistOnlyFor returns the PlaylistOnlyFor field value if set, zero value otherwise.
func (o *ChannelPublishingPublishPoints) GetPlaylistOnlyFor() string {
	if o == nil || o.PlaylistOnlyFor == nil {
		var ret string
		return ret
	}
	return *o.PlaylistOnlyFor
}

// GetPlaylistOnlyForOk returns a tuple with the PlaylistOnlyFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublishPoints) GetPlaylistOnlyForOk() (*string, bool) {
	if o == nil || o.PlaylistOnlyFor == nil {
		return nil, false
	}
	return o.PlaylistOnlyFor, true
}

// HasPlaylistOnlyFor returns a boolean if a field has been set.
func (o *ChannelPublishingPublishPoints) HasPlaylistOnlyFor() bool {
	if o != nil && o.PlaylistOnlyFor != nil {
		return true
	}

	return false
}

// SetPlaylistOnlyFor gets a reference to the given string and assigns it to the PlaylistOnlyFor field.
func (o *ChannelPublishingPublishPoints) SetPlaylistOnlyFor(v string) {
	o.PlaylistOnlyFor = &v
}

func (o ChannelPublishingPublishPoints) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Http != nil {
		toSerialize["http"] = o.Http
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.PlaylistOnlyFor != nil {
		toSerialize["playlist_only_for"] = o.PlaylistOnlyFor
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ChannelPublishingPublishPoints) UnmarshalJSON(bytes []byte) (err error) {
	varChannelPublishingPublishPoints := _ChannelPublishingPublishPoints{}

	if err = json.Unmarshal(bytes, &varChannelPublishingPublishPoints); err == nil {
		*o = ChannelPublishingPublishPoints(varChannelPublishingPublishPoints)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "http")
		delete(additionalProperties, "id")
		delete(additionalProperties, "playlist_only_for")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChannelPublishingPublishPoints struct {
	value *ChannelPublishingPublishPoints
	isSet bool
}

func (v NullableChannelPublishingPublishPoints) Get() *ChannelPublishingPublishPoints {
	return v.value
}

func (v *NullableChannelPublishingPublishPoints) Set(val *ChannelPublishingPublishPoints) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelPublishingPublishPoints) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelPublishingPublishPoints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelPublishingPublishPoints(val *ChannelPublishingPublishPoints) *NullableChannelPublishingPublishPoints {
	return &NullableChannelPublishingPublishPoints{value: val, isSet: true}
}

func (v NullableChannelPublishingPublishPoints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelPublishingPublishPoints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


