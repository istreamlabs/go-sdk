/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 * Contact: support@istreamplanet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// checks if the ArchiveFERRequestPackagesInnerArchiveS3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArchiveFERRequestPackagesInnerArchiveS3{}

// ArchiveFERRequestPackagesInnerArchiveS3 struct for ArchiveFERRequestPackagesInnerArchiveS3
type ArchiveFERRequestPackagesInnerArchiveS3 struct {
	BucketName string `json:"bucket_name"`
	Key string `json:"key"`
	Region string `json:"region"`
}

// NewArchiveFERRequestPackagesInnerArchiveS3 instantiates a new ArchiveFERRequestPackagesInnerArchiveS3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchiveFERRequestPackagesInnerArchiveS3(bucketName string, key string, region string) *ArchiveFERRequestPackagesInnerArchiveS3 {
	this := ArchiveFERRequestPackagesInnerArchiveS3{}
	this.BucketName = bucketName
	this.Key = key
	this.Region = region
	return &this
}

// NewArchiveFERRequestPackagesInnerArchiveS3WithDefaults instantiates a new ArchiveFERRequestPackagesInnerArchiveS3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchiveFERRequestPackagesInnerArchiveS3WithDefaults() *ArchiveFERRequestPackagesInnerArchiveS3 {
	this := ArchiveFERRequestPackagesInnerArchiveS3{}
	return &this
}

// GetBucketName returns the BucketName field value
func (o *ArchiveFERRequestPackagesInnerArchiveS3) GetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *ArchiveFERRequestPackagesInnerArchiveS3) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *ArchiveFERRequestPackagesInnerArchiveS3) SetBucketName(v string) {
	o.BucketName = v
}

// GetKey returns the Key field value
func (o *ArchiveFERRequestPackagesInnerArchiveS3) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ArchiveFERRequestPackagesInnerArchiveS3) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ArchiveFERRequestPackagesInnerArchiveS3) SetKey(v string) {
	o.Key = v
}

// GetRegion returns the Region field value
func (o *ArchiveFERRequestPackagesInnerArchiveS3) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *ArchiveFERRequestPackagesInnerArchiveS3) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *ArchiveFERRequestPackagesInnerArchiveS3) SetRegion(v string) {
	o.Region = v
}

func (o ArchiveFERRequestPackagesInnerArchiveS3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArchiveFERRequestPackagesInnerArchiveS3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucket_name"] = o.BucketName
	toSerialize["key"] = o.Key
	toSerialize["region"] = o.Region
	return toSerialize, nil
}

type NullableArchiveFERRequestPackagesInnerArchiveS3 struct {
	value *ArchiveFERRequestPackagesInnerArchiveS3
	isSet bool
}

func (v NullableArchiveFERRequestPackagesInnerArchiveS3) Get() *ArchiveFERRequestPackagesInnerArchiveS3 {
	return v.value
}

func (v *NullableArchiveFERRequestPackagesInnerArchiveS3) Set(val *ArchiveFERRequestPackagesInnerArchiveS3) {
	v.value = val
	v.isSet = true
}

func (v NullableArchiveFERRequestPackagesInnerArchiveS3) IsSet() bool {
	return v.isSet
}

func (v *NullableArchiveFERRequestPackagesInnerArchiveS3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchiveFERRequestPackagesInnerArchiveS3(val *ArchiveFERRequestPackagesInnerArchiveS3) *NullableArchiveFERRequestPackagesInnerArchiveS3 {
	return &NullableArchiveFERRequestPackagesInnerArchiveS3{value: val, isSet: true}
}

func (v NullableArchiveFERRequestPackagesInnerArchiveS3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchiveFERRequestPackagesInnerArchiveS3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


