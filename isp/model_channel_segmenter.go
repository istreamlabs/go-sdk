/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// ChannelSegmenter Video segmenting settings
type ChannelSegmenter struct {
	// Duration in milliseconds between GOPs within a segment
	GopDuration int32 `json:"gop_duration"`
	// Duration in milliseconds of one video segment file
	SegmentDuration int32 `json:"segment_duration"`
	AdditionalProperties map[string]interface{}
}

type _ChannelSegmenter ChannelSegmenter

// NewChannelSegmenter instantiates a new ChannelSegmenter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelSegmenter(gopDuration int32, segmentDuration int32, ) *ChannelSegmenter {
	this := ChannelSegmenter{}
	this.GopDuration = gopDuration
	this.SegmentDuration = segmentDuration
	return &this
}

// NewChannelSegmenterWithDefaults instantiates a new ChannelSegmenter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelSegmenterWithDefaults() *ChannelSegmenter {
	this := ChannelSegmenter{}
	return &this
}

// GetGopDuration returns the GopDuration field value
func (o *ChannelSegmenter) GetGopDuration() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.GopDuration
}

// GetGopDurationOk returns a tuple with the GopDuration field value
// and a boolean to check if the value has been set.
func (o *ChannelSegmenter) GetGopDurationOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GopDuration, true
}

// SetGopDuration sets field value
func (o *ChannelSegmenter) SetGopDuration(v int32) {
	o.GopDuration = v
}

// GetSegmentDuration returns the SegmentDuration field value
func (o *ChannelSegmenter) GetSegmentDuration() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.SegmentDuration
}

// GetSegmentDurationOk returns a tuple with the SegmentDuration field value
// and a boolean to check if the value has been set.
func (o *ChannelSegmenter) GetSegmentDurationOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SegmentDuration, true
}

// SetSegmentDuration sets field value
func (o *ChannelSegmenter) SetSegmentDuration(v int32) {
	o.SegmentDuration = v
}

func (o ChannelSegmenter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["gop_duration"] = o.GopDuration
	}
	if true {
		toSerialize["segment_duration"] = o.SegmentDuration
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ChannelSegmenter) UnmarshalJSON(bytes []byte) (err error) {
	varChannelSegmenter := _ChannelSegmenter{}

	if err = json.Unmarshal(bytes, &varChannelSegmenter); err == nil {
		*o = ChannelSegmenter(varChannelSegmenter)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "gop_duration")
		delete(additionalProperties, "segment_duration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChannelSegmenter struct {
	value *ChannelSegmenter
	isSet bool
}

func (v NullableChannelSegmenter) Get() *ChannelSegmenter {
	return v.value
}

func (v *NullableChannelSegmenter) Set(val *ChannelSegmenter) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelSegmenter) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelSegmenter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelSegmenter(val *ChannelSegmenter) *NullableChannelSegmenter {
	return &NullableChannelSegmenter{value: val, isSet: true}
}

func (v NullableChannelSegmenter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelSegmenter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


