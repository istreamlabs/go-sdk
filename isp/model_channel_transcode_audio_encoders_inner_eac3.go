/*
 * WBD Aventus Channels API
 *
 * API version: 0.0.0
 * Contact: live-control-plane-devs@wbd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// checks if the ChannelTranscodeAudioEncodersInnerEac3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelTranscodeAudioEncodersInnerEac3{}

// ChannelTranscodeAudioEncodersInnerEac3 Only one of ['eac3'] may be set.
type ChannelTranscodeAudioEncodersInnerEac3 struct {
	// If non-zero, configures the encoder to compute JOC metadata (i.e. Dolby Atmos) for the given logical speaker layout. The transcoder does not guarantee any particular bed layout in the JOC metadata, and this setting currently has no effect on that. It merely determines the channel layout to which all inputs are converted before encoding. Legal values are: 8 - 5.1.2 10 - 5.1.4 For sources with raw PCM input and more than 6 channels, configure this according to the expected input channel layout. For channels which expect to take a 7.1 EAC-3 input, configure to 8. For all other cases, including upmixing from 5.1 or fewer channels or any kind of Atmos input, configure to 10. This setting is mutually exclusive with ddp_joc_passthrough.
	DdpJocLogicalChannels *int32 `json:"ddp_joc_logical_channels,omitempty" format:"int32" doc:"If non-zero, configures the encoder to compute JOC metadata (i.e. Dolby Atmos) for the given logical speaker layout. The transcoder does not guarantee any particular bed layout in the JOC metadata, and this setting currently has no effect on that. It merely determines the channel layout to which all inputs are converted before encoding. Legal values are: 8 - 5.1.2 10 - 5.1.4 For sources with raw PCM input and more than 6 channels, configure this according to the expected input channel layout. For channels which expect to take a 7.1 EAC-3 input, configure to 8. For all other cases, including upmixing from 5.1 or fewer channels or any kind of Atmos input, configure to 10. This setting is mutually exclusive with ddp_joc_passthrough."`
	// Indicates that the source will contain Joint Object Coding metadata (Dolby Atmos) and that the encoder should operate in passthrough mode. https://learning.dolby.com/hc/en-us/articles/4406039180564-Appendix-C-Dolby-Atmos-Delivery-Codecs- When the audio encoder is configured with this setting, the source audio will be repackaged without being decoded and re-encoded. If the source is not DD+JOC, it will be replaced with silence.
	DdpJocPassthrough *bool `json:"ddp_joc_passthrough,omitempty" doc:"Indicates that the source will contain Joint Object Coding metadata (Dolby Atmos) and that the encoder should operate in passthrough mode. https://learning.dolby.com/hc/en-us/articles/4406039180564-Appendix-C-Dolby-Atmos-Delivery-Codecs- When the audio encoder is configured with this setting, the source audio will be repackaged without being decoded and re-encoded. If the source is not DD+JOC, it will be replaced with silence."`
	// If specified, overrides the dynamic range control line mode. If unspecified and the source audio is AC-3 or EAC-3, the DRC line mode matches the input. If unspecified and the source audio is any other codec, the encoder uses an unspecified default which may change without notice.
	DrcLineMode *string `json:"drc_line_mode,omitempty" enum:"DRC_FILM_STANDARD,DRC_FILM_LIGHT,DRC_MUSIC_STANDARD,DRC_MUSIC_LIGHT,DRC_SPEECH" doc:"If specified, overrides the dynamic range control line mode. If unspecified and the source audio is AC-3 or EAC-3, the DRC line mode matches the input. If unspecified and the source audio is any other codec, the encoder uses an unspecified default which may change without notice."`
	// If specified, overrides the dynamic range control RF mode. If unspecified and the source audio is AC-3 or EAC-3, the DRC RF mode matches the input. If unspecified and the source audio is any other codec, the encoder uses an unspecified default which may change without notice.
	DrcRfMode *string `json:"drc_rf_mode,omitempty" enum:"DRC_FILM_STANDARD,DRC_FILM_LIGHT,DRC_MUSIC_STANDARD,DRC_MUSIC_LIGHT,DRC_SPEECH" doc:"If specified, overrides the dynamic range control RF mode. If unspecified and the source audio is AC-3 or EAC-3, the DRC RF mode matches the input. If unspecified and the source audio is any other codec, the encoder uses an unspecified default which may change without notice."`
	// If specified, overrides whether surround phase shift is enabled. If unspecified and the source audio is AC-3 or EAC-3, the surround phase shift mode matches the input. If unspecified and the source audio is any other codec, the encoder uses an unspecified default which may change without notice.
	SurroundPhaseShift *string `json:"surround_phase_shift,omitempty" enum:"SURROUND_PHASE_SHIFT_ENABLED,SURROUND_PHASE_SHIFT_DISABLED" doc:"If specified, overrides whether surround phase shift is enabled. If unspecified and the source audio is AC-3 or EAC-3, the surround phase shift mode matches the input. If unspecified and the source audio is any other codec, the encoder uses an unspecified default which may change without notice."`
}

// NewChannelTranscodeAudioEncodersInnerEac3 instantiates a new ChannelTranscodeAudioEncodersInnerEac3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelTranscodeAudioEncodersInnerEac3() *ChannelTranscodeAudioEncodersInnerEac3 {
	this := ChannelTranscodeAudioEncodersInnerEac3{}
	return &this
}

// NewChannelTranscodeAudioEncodersInnerEac3WithDefaults instantiates a new ChannelTranscodeAudioEncodersInnerEac3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelTranscodeAudioEncodersInnerEac3WithDefaults() *ChannelTranscodeAudioEncodersInnerEac3 {
	this := ChannelTranscodeAudioEncodersInnerEac3{}
	return &this
}

// GetDdpJocLogicalChannels returns the DdpJocLogicalChannels field value if set, zero value otherwise.
func (o *ChannelTranscodeAudioEncodersInnerEac3) GetDdpJocLogicalChannels() int32 {
	if o == nil || IsNil(o.DdpJocLogicalChannels) {
		var ret int32
		return ret
	}
	return *o.DdpJocLogicalChannels
}

// GetDdpJocLogicalChannelsOk returns a tuple with the DdpJocLogicalChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeAudioEncodersInnerEac3) GetDdpJocLogicalChannelsOk() (*int32, bool) {
	if o == nil || IsNil(o.DdpJocLogicalChannels) {
		return nil, false
	}
	return o.DdpJocLogicalChannels, true
}

// HasDdpJocLogicalChannels returns a boolean if a field has been set.
func (o *ChannelTranscodeAudioEncodersInnerEac3) HasDdpJocLogicalChannels() bool {
	if o != nil && !IsNil(o.DdpJocLogicalChannels) {
		return true
	}

	return false
}

// SetDdpJocLogicalChannels gets a reference to the given int32 and assigns it to the DdpJocLogicalChannels field.
func (o *ChannelTranscodeAudioEncodersInnerEac3) SetDdpJocLogicalChannels(v int32) {
	o.DdpJocLogicalChannels = &v
}

// GetDdpJocPassthrough returns the DdpJocPassthrough field value if set, zero value otherwise.
func (o *ChannelTranscodeAudioEncodersInnerEac3) GetDdpJocPassthrough() bool {
	if o == nil || IsNil(o.DdpJocPassthrough) {
		var ret bool
		return ret
	}
	return *o.DdpJocPassthrough
}

// GetDdpJocPassthroughOk returns a tuple with the DdpJocPassthrough field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeAudioEncodersInnerEac3) GetDdpJocPassthroughOk() (*bool, bool) {
	if o == nil || IsNil(o.DdpJocPassthrough) {
		return nil, false
	}
	return o.DdpJocPassthrough, true
}

// HasDdpJocPassthrough returns a boolean if a field has been set.
func (o *ChannelTranscodeAudioEncodersInnerEac3) HasDdpJocPassthrough() bool {
	if o != nil && !IsNil(o.DdpJocPassthrough) {
		return true
	}

	return false
}

// SetDdpJocPassthrough gets a reference to the given bool and assigns it to the DdpJocPassthrough field.
func (o *ChannelTranscodeAudioEncodersInnerEac3) SetDdpJocPassthrough(v bool) {
	o.DdpJocPassthrough = &v
}

// GetDrcLineMode returns the DrcLineMode field value if set, zero value otherwise.
func (o *ChannelTranscodeAudioEncodersInnerEac3) GetDrcLineMode() string {
	if o == nil || IsNil(o.DrcLineMode) {
		var ret string
		return ret
	}
	return *o.DrcLineMode
}

// GetDrcLineModeOk returns a tuple with the DrcLineMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeAudioEncodersInnerEac3) GetDrcLineModeOk() (*string, bool) {
	if o == nil || IsNil(o.DrcLineMode) {
		return nil, false
	}
	return o.DrcLineMode, true
}

// HasDrcLineMode returns a boolean if a field has been set.
func (o *ChannelTranscodeAudioEncodersInnerEac3) HasDrcLineMode() bool {
	if o != nil && !IsNil(o.DrcLineMode) {
		return true
	}

	return false
}

// SetDrcLineMode gets a reference to the given string and assigns it to the DrcLineMode field.
func (o *ChannelTranscodeAudioEncodersInnerEac3) SetDrcLineMode(v string) {
	o.DrcLineMode = &v
}

// GetDrcRfMode returns the DrcRfMode field value if set, zero value otherwise.
func (o *ChannelTranscodeAudioEncodersInnerEac3) GetDrcRfMode() string {
	if o == nil || IsNil(o.DrcRfMode) {
		var ret string
		return ret
	}
	return *o.DrcRfMode
}

// GetDrcRfModeOk returns a tuple with the DrcRfMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeAudioEncodersInnerEac3) GetDrcRfModeOk() (*string, bool) {
	if o == nil || IsNil(o.DrcRfMode) {
		return nil, false
	}
	return o.DrcRfMode, true
}

// HasDrcRfMode returns a boolean if a field has been set.
func (o *ChannelTranscodeAudioEncodersInnerEac3) HasDrcRfMode() bool {
	if o != nil && !IsNil(o.DrcRfMode) {
		return true
	}

	return false
}

// SetDrcRfMode gets a reference to the given string and assigns it to the DrcRfMode field.
func (o *ChannelTranscodeAudioEncodersInnerEac3) SetDrcRfMode(v string) {
	o.DrcRfMode = &v
}

// GetSurroundPhaseShift returns the SurroundPhaseShift field value if set, zero value otherwise.
func (o *ChannelTranscodeAudioEncodersInnerEac3) GetSurroundPhaseShift() string {
	if o == nil || IsNil(o.SurroundPhaseShift) {
		var ret string
		return ret
	}
	return *o.SurroundPhaseShift
}

// GetSurroundPhaseShiftOk returns a tuple with the SurroundPhaseShift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeAudioEncodersInnerEac3) GetSurroundPhaseShiftOk() (*string, bool) {
	if o == nil || IsNil(o.SurroundPhaseShift) {
		return nil, false
	}
	return o.SurroundPhaseShift, true
}

// HasSurroundPhaseShift returns a boolean if a field has been set.
func (o *ChannelTranscodeAudioEncodersInnerEac3) HasSurroundPhaseShift() bool {
	if o != nil && !IsNil(o.SurroundPhaseShift) {
		return true
	}

	return false
}

// SetSurroundPhaseShift gets a reference to the given string and assigns it to the SurroundPhaseShift field.
func (o *ChannelTranscodeAudioEncodersInnerEac3) SetSurroundPhaseShift(v string) {
	o.SurroundPhaseShift = &v
}

func (o ChannelTranscodeAudioEncodersInnerEac3) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelTranscodeAudioEncodersInnerEac3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DdpJocLogicalChannels) {
		toSerialize["ddp_joc_logical_channels"] = o.DdpJocLogicalChannels
	}
	if !IsNil(o.DdpJocPassthrough) {
		toSerialize["ddp_joc_passthrough"] = o.DdpJocPassthrough
	}
	if !IsNil(o.DrcLineMode) {
		toSerialize["drc_line_mode"] = o.DrcLineMode
	}
	if !IsNil(o.DrcRfMode) {
		toSerialize["drc_rf_mode"] = o.DrcRfMode
	}
	if !IsNil(o.SurroundPhaseShift) {
		toSerialize["surround_phase_shift"] = o.SurroundPhaseShift
	}
	return toSerialize, nil
}

type NullableChannelTranscodeAudioEncodersInnerEac3 struct {
	value *ChannelTranscodeAudioEncodersInnerEac3
	isSet bool
}

func (v NullableChannelTranscodeAudioEncodersInnerEac3) Get() *ChannelTranscodeAudioEncodersInnerEac3 {
	return v.value
}

func (v *NullableChannelTranscodeAudioEncodersInnerEac3) Set(val *ChannelTranscodeAudioEncodersInnerEac3) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelTranscodeAudioEncodersInnerEac3) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelTranscodeAudioEncodersInnerEac3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelTranscodeAudioEncodersInnerEac3(val *ChannelTranscodeAudioEncodersInnerEac3) *NullableChannelTranscodeAudioEncodersInnerEac3 {
	return &NullableChannelTranscodeAudioEncodersInnerEac3{value: val, isSet: true}
}

func (v NullableChannelTranscodeAudioEncodersInnerEac3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelTranscodeAudioEncodersInnerEac3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
