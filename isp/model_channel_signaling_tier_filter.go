/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// ChannelSignalingTierFilter Specifies how to filter the provided segments, when received through in-band SCTE-35, based on the SCTE-35 SpliceInfoSection Tier.
type ChannelSignalingTierFilter struct {
	ExplicitTier *ChannelSignalingTierFilterExplicitTier `json:"explicit_tier,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChannelSignalingTierFilter ChannelSignalingTierFilter

// NewChannelSignalingTierFilter instantiates a new ChannelSignalingTierFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelSignalingTierFilter() *ChannelSignalingTierFilter {
	this := ChannelSignalingTierFilter{}
	return &this
}

// NewChannelSignalingTierFilterWithDefaults instantiates a new ChannelSignalingTierFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelSignalingTierFilterWithDefaults() *ChannelSignalingTierFilter {
	this := ChannelSignalingTierFilter{}
	return &this
}

// GetExplicitTier returns the ExplicitTier field value if set, zero value otherwise.
func (o *ChannelSignalingTierFilter) GetExplicitTier() ChannelSignalingTierFilterExplicitTier {
	if o == nil || o.ExplicitTier == nil {
		var ret ChannelSignalingTierFilterExplicitTier
		return ret
	}
	return *o.ExplicitTier
}

// GetExplicitTierOk returns a tuple with the ExplicitTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelSignalingTierFilter) GetExplicitTierOk() (*ChannelSignalingTierFilterExplicitTier, bool) {
	if o == nil || o.ExplicitTier == nil {
		return nil, false
	}
	return o.ExplicitTier, true
}

// HasExplicitTier returns a boolean if a field has been set.
func (o *ChannelSignalingTierFilter) HasExplicitTier() bool {
	if o != nil && o.ExplicitTier != nil {
		return true
	}

	return false
}

// SetExplicitTier gets a reference to the given ChannelSignalingTierFilterExplicitTier and assigns it to the ExplicitTier field.
func (o *ChannelSignalingTierFilter) SetExplicitTier(v ChannelSignalingTierFilterExplicitTier) {
	o.ExplicitTier = &v
}

func (o ChannelSignalingTierFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExplicitTier != nil {
		toSerialize["explicit_tier"] = o.ExplicitTier
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ChannelSignalingTierFilter) UnmarshalJSON(bytes []byte) (err error) {
	varChannelSignalingTierFilter := _ChannelSignalingTierFilter{}

	if err = json.Unmarshal(bytes, &varChannelSignalingTierFilter); err == nil {
		*o = ChannelSignalingTierFilter(varChannelSignalingTierFilter)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "explicit_tier")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChannelSignalingTierFilter struct {
	value *ChannelSignalingTierFilter
	isSet bool
}

func (v NullableChannelSignalingTierFilter) Get() *ChannelSignalingTierFilter {
	return v.value
}

func (v *NullableChannelSignalingTierFilter) Set(val *ChannelSignalingTierFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelSignalingTierFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelSignalingTierFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelSignalingTierFilter(val *ChannelSignalingTierFilter) *NullableChannelSignalingTierFilter {
	return &NullableChannelSignalingTierFilter{value: val, isSet: true}
}

func (v NullableChannelSignalingTierFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelSignalingTierFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


