/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 * Contact: support@istreamplanet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// ChannelTranscodeH265 Configure the encoder to use the H.265 codec. Only one of ['H264Settings', 'H265Settings'] may be set
type ChannelTranscodeH265 struct {
	// H.265 video profile, which defines various encoder features and settings. See https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding#Profiles for details.
	Profile *string `json:"profile,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChannelTranscodeH265 ChannelTranscodeH265

// NewChannelTranscodeH265 instantiates a new ChannelTranscodeH265 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelTranscodeH265() *ChannelTranscodeH265 {
	this := ChannelTranscodeH265{}
	return &this
}

// NewChannelTranscodeH265WithDefaults instantiates a new ChannelTranscodeH265 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelTranscodeH265WithDefaults() *ChannelTranscodeH265 {
	this := ChannelTranscodeH265{}
	return &this
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *ChannelTranscodeH265) GetProfile() string {
	if o == nil || o.Profile == nil {
		var ret string
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeH265) GetProfileOk() (*string, bool) {
	if o == nil || o.Profile == nil {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *ChannelTranscodeH265) HasProfile() bool {
	if o != nil && o.Profile != nil {
		return true
	}

	return false
}

// SetProfile gets a reference to the given string and assigns it to the Profile field.
func (o *ChannelTranscodeH265) SetProfile(v string) {
	o.Profile = &v
}

func (o ChannelTranscodeH265) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Profile != nil {
		toSerialize["profile"] = o.Profile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ChannelTranscodeH265) UnmarshalJSON(bytes []byte) (err error) {
	varChannelTranscodeH265 := _ChannelTranscodeH265{}

	if err = json.Unmarshal(bytes, &varChannelTranscodeH265); err == nil {
		*o = ChannelTranscodeH265(varChannelTranscodeH265)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "profile")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChannelTranscodeH265 struct {
	value *ChannelTranscodeH265
	isSet bool
}

func (v NullableChannelTranscodeH265) Get() *ChannelTranscodeH265 {
	return v.value
}

func (v *NullableChannelTranscodeH265) Set(val *ChannelTranscodeH265) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelTranscodeH265) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelTranscodeH265) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelTranscodeH265(val *ChannelTranscodeH265) *NullableChannelTranscodeH265 {
	return &NullableChannelTranscodeH265{value: val, isSet: true}
}

func (v NullableChannelTranscodeH265) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelTranscodeH265) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


