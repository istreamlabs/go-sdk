/*
 * WBD Aventus Channels API
 *
 * API version: 0.0.0
 * Contact: live-control-plane-devs@wbd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// checks if the ChannelTranscodeSubtitleEncodersInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelTranscodeSubtitleEncodersInner{}

// ChannelTranscodeSubtitleEncodersInner struct for ChannelTranscodeSubtitleEncodersInner
type ChannelTranscodeSubtitleEncodersInner struct {
	AtscCaptions *ChannelTranscodeSubtitleEncodersInnerAtscCaptions `json:"atsc_captions,omitempty"`
	// Encoder ID. IDs must be unique for all encoders. This ID is referenced when setting up playlist publishing.
	Id *string `json:"id,omitempty" minLength:"1" doc:"Encoder ID. IDs must be unique for all encoders. This ID is referenced when setting up playlist publishing."`
	// Language is the code for the language in which the subtitles are written.
	Language *string `json:"language,omitempty" minLength:"2" doc:"Language is the code for the language in which the subtitles are written."`
	// Used by the player to map text tracks to a quadrant, which represents a single view in a multiview layout. This value is opaque and not used by Aventus.
	Tag      *string                                        `json:"tag,omitempty" doc:"Used by the player to map text tracks to a quadrant, which represents a single view in a multiview layout. This value is opaque and not used by Aventus."`
	Teletext *ChannelTranscodeSubtitleEncodersInnerTeletext `json:"teletext,omitempty"`
	// Usage indicates how this encoder should be flagged in generated manifests.
	Usage *string `json:"usage,omitempty" enum:"CLOSED_CAPTIONS,SUBTITLES" doc:"Usage indicates how this encoder should be flagged in generated manifests."`
}

// NewChannelTranscodeSubtitleEncodersInner instantiates a new ChannelTranscodeSubtitleEncodersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelTranscodeSubtitleEncodersInner() *ChannelTranscodeSubtitleEncodersInner {
	this := ChannelTranscodeSubtitleEncodersInner{}
	return &this
}

// NewChannelTranscodeSubtitleEncodersInnerWithDefaults instantiates a new ChannelTranscodeSubtitleEncodersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelTranscodeSubtitleEncodersInnerWithDefaults() *ChannelTranscodeSubtitleEncodersInner {
	this := ChannelTranscodeSubtitleEncodersInner{}
	return &this
}

// GetAtscCaptions returns the AtscCaptions field value if set, zero value otherwise.
func (o *ChannelTranscodeSubtitleEncodersInner) GetAtscCaptions() ChannelTranscodeSubtitleEncodersInnerAtscCaptions {
	if o == nil || IsNil(o.AtscCaptions) {
		var ret ChannelTranscodeSubtitleEncodersInnerAtscCaptions
		return ret
	}
	return *o.AtscCaptions
}

// GetAtscCaptionsOk returns a tuple with the AtscCaptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeSubtitleEncodersInner) GetAtscCaptionsOk() (*ChannelTranscodeSubtitleEncodersInnerAtscCaptions, bool) {
	if o == nil || IsNil(o.AtscCaptions) {
		return nil, false
	}
	return o.AtscCaptions, true
}

// HasAtscCaptions returns a boolean if a field has been set.
func (o *ChannelTranscodeSubtitleEncodersInner) HasAtscCaptions() bool {
	if o != nil && !IsNil(o.AtscCaptions) {
		return true
	}

	return false
}

// SetAtscCaptions gets a reference to the given ChannelTranscodeSubtitleEncodersInnerAtscCaptions and assigns it to the AtscCaptions field.
func (o *ChannelTranscodeSubtitleEncodersInner) SetAtscCaptions(v ChannelTranscodeSubtitleEncodersInnerAtscCaptions) {
	o.AtscCaptions = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChannelTranscodeSubtitleEncodersInner) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeSubtitleEncodersInner) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChannelTranscodeSubtitleEncodersInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ChannelTranscodeSubtitleEncodersInner) SetId(v string) {
	o.Id = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ChannelTranscodeSubtitleEncodersInner) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeSubtitleEncodersInner) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ChannelTranscodeSubtitleEncodersInner) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ChannelTranscodeSubtitleEncodersInner) SetLanguage(v string) {
	o.Language = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *ChannelTranscodeSubtitleEncodersInner) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeSubtitleEncodersInner) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *ChannelTranscodeSubtitleEncodersInner) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *ChannelTranscodeSubtitleEncodersInner) SetTag(v string) {
	o.Tag = &v
}

// GetTeletext returns the Teletext field value if set, zero value otherwise.
func (o *ChannelTranscodeSubtitleEncodersInner) GetTeletext() ChannelTranscodeSubtitleEncodersInnerTeletext {
	if o == nil || IsNil(o.Teletext) {
		var ret ChannelTranscodeSubtitleEncodersInnerTeletext
		return ret
	}
	return *o.Teletext
}

// GetTeletextOk returns a tuple with the Teletext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeSubtitleEncodersInner) GetTeletextOk() (*ChannelTranscodeSubtitleEncodersInnerTeletext, bool) {
	if o == nil || IsNil(o.Teletext) {
		return nil, false
	}
	return o.Teletext, true
}

// HasTeletext returns a boolean if a field has been set.
func (o *ChannelTranscodeSubtitleEncodersInner) HasTeletext() bool {
	if o != nil && !IsNil(o.Teletext) {
		return true
	}

	return false
}

// SetTeletext gets a reference to the given ChannelTranscodeSubtitleEncodersInnerTeletext and assigns it to the Teletext field.
func (o *ChannelTranscodeSubtitleEncodersInner) SetTeletext(v ChannelTranscodeSubtitleEncodersInnerTeletext) {
	o.Teletext = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *ChannelTranscodeSubtitleEncodersInner) GetUsage() string {
	if o == nil || IsNil(o.Usage) {
		var ret string
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeSubtitleEncodersInner) GetUsageOk() (*string, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *ChannelTranscodeSubtitleEncodersInner) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given string and assigns it to the Usage field.
func (o *ChannelTranscodeSubtitleEncodersInner) SetUsage(v string) {
	o.Usage = &v
}

func (o ChannelTranscodeSubtitleEncodersInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelTranscodeSubtitleEncodersInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AtscCaptions) {
		toSerialize["atsc_captions"] = o.AtscCaptions
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.Teletext) {
		toSerialize["teletext"] = o.Teletext
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return toSerialize, nil
}

type NullableChannelTranscodeSubtitleEncodersInner struct {
	value *ChannelTranscodeSubtitleEncodersInner
	isSet bool
}

func (v NullableChannelTranscodeSubtitleEncodersInner) Get() *ChannelTranscodeSubtitleEncodersInner {
	return v.value
}

func (v *NullableChannelTranscodeSubtitleEncodersInner) Set(val *ChannelTranscodeSubtitleEncodersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelTranscodeSubtitleEncodersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelTranscodeSubtitleEncodersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelTranscodeSubtitleEncodersInner(val *ChannelTranscodeSubtitleEncodersInner) *NullableChannelTranscodeSubtitleEncodersInner {
	return &NullableChannelTranscodeSubtitleEncodersInner{value: val, isSet: true}
}

func (v NullableChannelTranscodeSubtitleEncodersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelTranscodeSubtitleEncodersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
