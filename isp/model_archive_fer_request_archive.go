/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 * Contact: support@istreamplanet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// checks if the ArchiveFERRequestArchive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArchiveFERRequestArchive{}

// ArchiveFERRequestArchive Archive settings
type ArchiveFERRequestArchive struct {
	S3 ArchiveFERRequestArchiveS3 `json:"s3"`
}

// NewArchiveFERRequestArchive instantiates a new ArchiveFERRequestArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchiveFERRequestArchive(s3 ArchiveFERRequestArchiveS3) *ArchiveFERRequestArchive {
	this := ArchiveFERRequestArchive{}
	this.S3 = s3
	return &this
}

// NewArchiveFERRequestArchiveWithDefaults instantiates a new ArchiveFERRequestArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchiveFERRequestArchiveWithDefaults() *ArchiveFERRequestArchive {
	this := ArchiveFERRequestArchive{}
	return &this
}

// GetS3 returns the S3 field value
func (o *ArchiveFERRequestArchive) GetS3() ArchiveFERRequestArchiveS3 {
	if o == nil {
		var ret ArchiveFERRequestArchiveS3
		return ret
	}

	return o.S3
}

// GetS3Ok returns a tuple with the S3 field value
// and a boolean to check if the value has been set.
func (o *ArchiveFERRequestArchive) GetS3Ok() (*ArchiveFERRequestArchiveS3, bool) {
	if o == nil {
		return nil, false
	}
	return &o.S3, true
}

// SetS3 sets field value
func (o *ArchiveFERRequestArchive) SetS3(v ArchiveFERRequestArchiveS3) {
	o.S3 = v
}

func (o ArchiveFERRequestArchive) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArchiveFERRequestArchive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["s3"] = o.S3
	return toSerialize, nil
}

type NullableArchiveFERRequestArchive struct {
	value *ArchiveFERRequestArchive
	isSet bool
}

func (v NullableArchiveFERRequestArchive) Get() *ArchiveFERRequestArchive {
	return v.value
}

func (v *NullableArchiveFERRequestArchive) Set(val *ArchiveFERRequestArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableArchiveFERRequestArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableArchiveFERRequestArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchiveFERRequestArchive(val *ArchiveFERRequestArchive) *NullableArchiveFERRequestArchive {
	return &NullableArchiveFERRequestArchive{value: val, isSet: true}
}

func (v NullableArchiveFERRequestArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchiveFERRequestArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


