/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 * Contact: support@istreamplanet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// checks if the ArchiveFERRequestArchiveS3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArchiveFERRequestArchiveS3{}

// ArchiveFERRequestArchiveS3 struct for ArchiveFERRequestArchiveS3
type ArchiveFERRequestArchiveS3 struct {
	BucketName string `json:"bucket_name"`
	Prefix string `json:"prefix"`
	Region string `json:"region"`
}

// NewArchiveFERRequestArchiveS3 instantiates a new ArchiveFERRequestArchiveS3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchiveFERRequestArchiveS3(bucketName string, prefix string, region string) *ArchiveFERRequestArchiveS3 {
	this := ArchiveFERRequestArchiveS3{}
	this.BucketName = bucketName
	this.Prefix = prefix
	this.Region = region
	return &this
}

// NewArchiveFERRequestArchiveS3WithDefaults instantiates a new ArchiveFERRequestArchiveS3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchiveFERRequestArchiveS3WithDefaults() *ArchiveFERRequestArchiveS3 {
	this := ArchiveFERRequestArchiveS3{}
	return &this
}

// GetBucketName returns the BucketName field value
func (o *ArchiveFERRequestArchiveS3) GetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *ArchiveFERRequestArchiveS3) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *ArchiveFERRequestArchiveS3) SetBucketName(v string) {
	o.BucketName = v
}

// GetPrefix returns the Prefix field value
func (o *ArchiveFERRequestArchiveS3) GetPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
func (o *ArchiveFERRequestArchiveS3) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prefix, true
}

// SetPrefix sets field value
func (o *ArchiveFERRequestArchiveS3) SetPrefix(v string) {
	o.Prefix = v
}

// GetRegion returns the Region field value
func (o *ArchiveFERRequestArchiveS3) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *ArchiveFERRequestArchiveS3) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *ArchiveFERRequestArchiveS3) SetRegion(v string) {
	o.Region = v
}

func (o ArchiveFERRequestArchiveS3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArchiveFERRequestArchiveS3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucket_name"] = o.BucketName
	toSerialize["prefix"] = o.Prefix
	toSerialize["region"] = o.Region
	return toSerialize, nil
}

type NullableArchiveFERRequestArchiveS3 struct {
	value *ArchiveFERRequestArchiveS3
	isSet bool
}

func (v NullableArchiveFERRequestArchiveS3) Get() *ArchiveFERRequestArchiveS3 {
	return v.value
}

func (v *NullableArchiveFERRequestArchiveS3) Set(val *ArchiveFERRequestArchiveS3) {
	v.value = val
	v.isSet = true
}

func (v NullableArchiveFERRequestArchiveS3) IsSet() bool {
	return v.isSet
}

func (v *NullableArchiveFERRequestArchiveS3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchiveFERRequestArchiveS3(val *ArchiveFERRequestArchiveS3) *NullableArchiveFERRequestArchiveS3 {
	return &NullableArchiveFERRequestArchiveS3{value: val, isSet: true}
}

func (v NullableArchiveFERRequestArchiveS3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchiveFERRequestArchiveS3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


