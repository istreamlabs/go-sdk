/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// ChannelSource Channel source
type ChannelSource struct {
	// Station source ID
	Id string `json:"id"`
	// Source name
	Name *string `json:"name,omitempty"`
	// Link to this resource
	Self *string `json:"self,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChannelSource ChannelSource

// NewChannelSource instantiates a new ChannelSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelSource(id string, ) *ChannelSource {
	this := ChannelSource{}
	this.Id = id
	return &this
}

// NewChannelSourceWithDefaults instantiates a new ChannelSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelSourceWithDefaults() *ChannelSource {
	this := ChannelSource{}
	return &this
}

// GetId returns the Id field value
func (o *ChannelSource) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ChannelSource) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ChannelSource) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ChannelSource) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelSource) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ChannelSource) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ChannelSource) SetName(v string) {
	o.Name = &v
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *ChannelSource) GetSelf() string {
	if o == nil || o.Self == nil {
		var ret string
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelSource) GetSelfOk() (*string, bool) {
	if o == nil || o.Self == nil {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *ChannelSource) HasSelf() bool {
	if o != nil && o.Self != nil {
		return true
	}

	return false
}

// SetSelf gets a reference to the given string and assigns it to the Self field.
func (o *ChannelSource) SetSelf(v string) {
	o.Self = &v
}

func (o ChannelSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Self != nil {
		toSerialize["self"] = o.Self
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ChannelSource) UnmarshalJSON(bytes []byte) (err error) {
	varChannelSource := _ChannelSource{}

	if err = json.Unmarshal(bytes, &varChannelSource); err == nil {
		*o = ChannelSource(varChannelSource)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "self")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChannelSource struct {
	value *ChannelSource
	isSet bool
}

func (v NullableChannelSource) Get() *ChannelSource {
	return v.value
}

func (v *NullableChannelSource) Set(val *ChannelSource) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelSource) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelSource(val *ChannelSource) *NullableChannelSource {
	return &NullableChannelSource{value: val, isSet: true}
}

func (v NullableChannelSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


