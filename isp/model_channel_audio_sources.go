/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// ChannelAudioSources struct for ChannelAudioSources
type ChannelAudioSources struct {
	// Unique audio source ID
	Id string `json:"id"`
	// Language format
	Language string `json:"language"`
	// Friendly name to describe audio source.
	Name string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _ChannelAudioSources ChannelAudioSources

// NewChannelAudioSources instantiates a new ChannelAudioSources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelAudioSources(id string, language string, name string, ) *ChannelAudioSources {
	this := ChannelAudioSources{}
	this.Id = id
	this.Language = language
	this.Name = name
	return &this
}

// NewChannelAudioSourcesWithDefaults instantiates a new ChannelAudioSources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelAudioSourcesWithDefaults() *ChannelAudioSources {
	this := ChannelAudioSources{}
	return &this
}

// GetId returns the Id field value
func (o *ChannelAudioSources) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ChannelAudioSources) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ChannelAudioSources) SetId(v string) {
	o.Id = v
}

// GetLanguage returns the Language field value
func (o *ChannelAudioSources) GetLanguage() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *ChannelAudioSources) GetLanguageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *ChannelAudioSources) SetLanguage(v string) {
	o.Language = v
}

// GetName returns the Name field value
func (o *ChannelAudioSources) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ChannelAudioSources) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ChannelAudioSources) SetName(v string) {
	o.Name = v
}

func (o ChannelAudioSources) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["language"] = o.Language
	}
	if true {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ChannelAudioSources) UnmarshalJSON(bytes []byte) (err error) {
	varChannelAudioSources := _ChannelAudioSources{}

	if err = json.Unmarshal(bytes, &varChannelAudioSources); err == nil {
		*o = ChannelAudioSources(varChannelAudioSources)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "language")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChannelAudioSources struct {
	value *ChannelAudioSources
	isSet bool
}

func (v NullableChannelAudioSources) Get() *ChannelAudioSources {
	return v.value
}

func (v *NullableChannelAudioSources) Set(val *ChannelAudioSources) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelAudioSources) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelAudioSources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelAudioSources(val *ChannelAudioSources) *NullableChannelAudioSources {
	return &NullableChannelAudioSources{value: val, isSet: true}
}

func (v NullableChannelAudioSources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelAudioSources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


