/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// ChannelIngestSource Source provides a reference to the input media stream for this channel.
type ChannelIngestSource struct {
	// Unique identifier for this source.
	Id *string `json:"id,omitempty"`
	// Self link for the source.
	Self *string `json:"self,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChannelIngestSource ChannelIngestSource

// NewChannelIngestSource instantiates a new ChannelIngestSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelIngestSource() *ChannelIngestSource {
	this := ChannelIngestSource{}
	return &this
}

// NewChannelIngestSourceWithDefaults instantiates a new ChannelIngestSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelIngestSourceWithDefaults() *ChannelIngestSource {
	this := ChannelIngestSource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChannelIngestSource) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelIngestSource) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChannelIngestSource) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ChannelIngestSource) SetId(v string) {
	o.Id = &v
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *ChannelIngestSource) GetSelf() string {
	if o == nil || o.Self == nil {
		var ret string
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelIngestSource) GetSelfOk() (*string, bool) {
	if o == nil || o.Self == nil {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *ChannelIngestSource) HasSelf() bool {
	if o != nil && o.Self != nil {
		return true
	}

	return false
}

// SetSelf gets a reference to the given string and assigns it to the Self field.
func (o *ChannelIngestSource) SetSelf(v string) {
	o.Self = &v
}

func (o ChannelIngestSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Self != nil {
		toSerialize["self"] = o.Self
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ChannelIngestSource) UnmarshalJSON(bytes []byte) (err error) {
	varChannelIngestSource := _ChannelIngestSource{}

	if err = json.Unmarshal(bytes, &varChannelIngestSource); err == nil {
		*o = ChannelIngestSource(varChannelIngestSource)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "self")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChannelIngestSource struct {
	value *ChannelIngestSource
	isSet bool
}

func (v NullableChannelIngestSource) Get() *ChannelIngestSource {
	return v.value
}

func (v *NullableChannelIngestSource) Set(val *ChannelIngestSource) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelIngestSource) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelIngestSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelIngestSource(val *ChannelIngestSource) *NullableChannelIngestSource {
	return &NullableChannelIngestSource{value: val, isSet: true}
}

func (v NullableChannelIngestSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelIngestSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


