/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// ChannelPublishingClosedCaptionStreams struct for ChannelPublishingClosedCaptionStreams
type ChannelPublishingClosedCaptionStreams struct {
	// Language code as RFC 5646, e.g. 'en' 'en-US'.
	Language *string `json:"language,omitempty"`
	// Source stream name.
	Name *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChannelPublishingClosedCaptionStreams ChannelPublishingClosedCaptionStreams

// NewChannelPublishingClosedCaptionStreams instantiates a new ChannelPublishingClosedCaptionStreams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelPublishingClosedCaptionStreams() *ChannelPublishingClosedCaptionStreams {
	this := ChannelPublishingClosedCaptionStreams{}
	return &this
}

// NewChannelPublishingClosedCaptionStreamsWithDefaults instantiates a new ChannelPublishingClosedCaptionStreams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelPublishingClosedCaptionStreamsWithDefaults() *ChannelPublishingClosedCaptionStreams {
	this := ChannelPublishingClosedCaptionStreams{}
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ChannelPublishingClosedCaptionStreams) GetLanguage() string {
	if o == nil || o.Language == nil {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingClosedCaptionStreams) GetLanguageOk() (*string, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ChannelPublishingClosedCaptionStreams) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ChannelPublishingClosedCaptionStreams) SetLanguage(v string) {
	o.Language = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ChannelPublishingClosedCaptionStreams) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingClosedCaptionStreams) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ChannelPublishingClosedCaptionStreams) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ChannelPublishingClosedCaptionStreams) SetName(v string) {
	o.Name = &v
}

func (o ChannelPublishingClosedCaptionStreams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ChannelPublishingClosedCaptionStreams) UnmarshalJSON(bytes []byte) (err error) {
	varChannelPublishingClosedCaptionStreams := _ChannelPublishingClosedCaptionStreams{}

	if err = json.Unmarshal(bytes, &varChannelPublishingClosedCaptionStreams); err == nil {
		*o = ChannelPublishingClosedCaptionStreams(varChannelPublishingClosedCaptionStreams)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "language")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChannelPublishingClosedCaptionStreams struct {
	value *ChannelPublishingClosedCaptionStreams
	isSet bool
}

func (v NullableChannelPublishingClosedCaptionStreams) Get() *ChannelPublishingClosedCaptionStreams {
	return v.value
}

func (v *NullableChannelPublishingClosedCaptionStreams) Set(val *ChannelPublishingClosedCaptionStreams) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelPublishingClosedCaptionStreams) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelPublishingClosedCaptionStreams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelPublishingClosedCaptionStreams(val *ChannelPublishingClosedCaptionStreams) *NullableChannelPublishingClosedCaptionStreams {
	return &NullableChannelPublishingClosedCaptionStreams{value: val, isSet: true}
}

func (v NullableChannelPublishingClosedCaptionStreams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelPublishingClosedCaptionStreams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


