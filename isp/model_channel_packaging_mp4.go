/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 * Contact: support@istreamplanet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// ChannelPackagingMp4 Uses MP4 format for each segments. Only one of ['mp2_t', 'mp4'] may be set.
type ChannelPackagingMp4 struct {
	// CaptionPlacement defines where caption messages should be placed in the output MP4.
	CaptionPlacement *string `json:"caption_placement,omitempty"`
	// Insert pssh boxes generated by content protection into packaged segments. Defaults to not insert pssh boxes to the packaged segments.
	InsertPsshBox *bool `json:"insert_pssh_box,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChannelPackagingMp4 ChannelPackagingMp4

// NewChannelPackagingMp4 instantiates a new ChannelPackagingMp4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelPackagingMp4() *ChannelPackagingMp4 {
	this := ChannelPackagingMp4{}
	return &this
}

// NewChannelPackagingMp4WithDefaults instantiates a new ChannelPackagingMp4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelPackagingMp4WithDefaults() *ChannelPackagingMp4 {
	this := ChannelPackagingMp4{}
	return &this
}

// GetCaptionPlacement returns the CaptionPlacement field value if set, zero value otherwise.
func (o *ChannelPackagingMp4) GetCaptionPlacement() string {
	if o == nil || o.CaptionPlacement == nil {
		var ret string
		return ret
	}
	return *o.CaptionPlacement
}

// GetCaptionPlacementOk returns a tuple with the CaptionPlacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPackagingMp4) GetCaptionPlacementOk() (*string, bool) {
	if o == nil || o.CaptionPlacement == nil {
		return nil, false
	}
	return o.CaptionPlacement, true
}

// HasCaptionPlacement returns a boolean if a field has been set.
func (o *ChannelPackagingMp4) HasCaptionPlacement() bool {
	if o != nil && o.CaptionPlacement != nil {
		return true
	}

	return false
}

// SetCaptionPlacement gets a reference to the given string and assigns it to the CaptionPlacement field.
func (o *ChannelPackagingMp4) SetCaptionPlacement(v string) {
	o.CaptionPlacement = &v
}

// GetInsertPsshBox returns the InsertPsshBox field value if set, zero value otherwise.
func (o *ChannelPackagingMp4) GetInsertPsshBox() bool {
	if o == nil || o.InsertPsshBox == nil {
		var ret bool
		return ret
	}
	return *o.InsertPsshBox
}

// GetInsertPsshBoxOk returns a tuple with the InsertPsshBox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPackagingMp4) GetInsertPsshBoxOk() (*bool, bool) {
	if o == nil || o.InsertPsshBox == nil {
		return nil, false
	}
	return o.InsertPsshBox, true
}

// HasInsertPsshBox returns a boolean if a field has been set.
func (o *ChannelPackagingMp4) HasInsertPsshBox() bool {
	if o != nil && o.InsertPsshBox != nil {
		return true
	}

	return false
}

// SetInsertPsshBox gets a reference to the given bool and assigns it to the InsertPsshBox field.
func (o *ChannelPackagingMp4) SetInsertPsshBox(v bool) {
	o.InsertPsshBox = &v
}

func (o ChannelPackagingMp4) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CaptionPlacement != nil {
		toSerialize["caption_placement"] = o.CaptionPlacement
	}
	if o.InsertPsshBox != nil {
		toSerialize["insert_pssh_box"] = o.InsertPsshBox
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ChannelPackagingMp4) UnmarshalJSON(bytes []byte) (err error) {
	varChannelPackagingMp4 := _ChannelPackagingMp4{}

	if err = json.Unmarshal(bytes, &varChannelPackagingMp4); err == nil {
		*o = ChannelPackagingMp4(varChannelPackagingMp4)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "caption_placement")
		delete(additionalProperties, "insert_pssh_box")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChannelPackagingMp4 struct {
	value *ChannelPackagingMp4
	isSet bool
}

func (v NullableChannelPackagingMp4) Get() *ChannelPackagingMp4 {
	return v.value
}

func (v *NullableChannelPackagingMp4) Set(val *ChannelPackagingMp4) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelPackagingMp4) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelPackagingMp4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelPackagingMp4(val *ChannelPackagingMp4) *NullableChannelPackagingMp4 {
	return &NullableChannelPackagingMp4{value: val, isSet: true}
}

func (v NullableChannelPackagingMp4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelPackagingMp4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


