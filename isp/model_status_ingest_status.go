/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 * Contact: support@istreamplanet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// StatusIngestStatus Ingest components's status.
type StatusIngestStatus struct {
	PrimaryStatus *StatusIngestStatusPrimaryStatus `json:"primary_status,omitempty"`
	SecondaryStatus *StatusIngestStatusSecondaryStatus `json:"secondary_status,omitempty"`
	SourceLossSlateStatus *StatusIngestStatusSourceLossSlateStatus `json:"source_loss_slate_status,omitempty"`
	// Reports whether source merging is currently active i.e. that the transcoder is merging samples from primary and secondary sources to conceal errors.
	SourceMergingActive *bool `json:"source_merging_active,omitempty"`
	// Reports whether source merging was disabled via API.
	SourceMergingDisabled *bool `json:"source_merging_disabled,omitempty"`
}

// NewStatusIngestStatus instantiates a new StatusIngestStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusIngestStatus() *StatusIngestStatus {
	this := StatusIngestStatus{}
	return &this
}

// NewStatusIngestStatusWithDefaults instantiates a new StatusIngestStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusIngestStatusWithDefaults() *StatusIngestStatus {
	this := StatusIngestStatus{}
	return &this
}

// GetPrimaryStatus returns the PrimaryStatus field value if set, zero value otherwise.
func (o *StatusIngestStatus) GetPrimaryStatus() StatusIngestStatusPrimaryStatus {
	if o == nil || o.PrimaryStatus == nil {
		var ret StatusIngestStatusPrimaryStatus
		return ret
	}
	return *o.PrimaryStatus
}

// GetPrimaryStatusOk returns a tuple with the PrimaryStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusIngestStatus) GetPrimaryStatusOk() (*StatusIngestStatusPrimaryStatus, bool) {
	if o == nil || o.PrimaryStatus == nil {
		return nil, false
	}
	return o.PrimaryStatus, true
}

// HasPrimaryStatus returns a boolean if a field has been set.
func (o *StatusIngestStatus) HasPrimaryStatus() bool {
	if o != nil && o.PrimaryStatus != nil {
		return true
	}

	return false
}

// SetPrimaryStatus gets a reference to the given StatusIngestStatusPrimaryStatus and assigns it to the PrimaryStatus field.
func (o *StatusIngestStatus) SetPrimaryStatus(v StatusIngestStatusPrimaryStatus) {
	o.PrimaryStatus = &v
}

// GetSecondaryStatus returns the SecondaryStatus field value if set, zero value otherwise.
func (o *StatusIngestStatus) GetSecondaryStatus() StatusIngestStatusSecondaryStatus {
	if o == nil || o.SecondaryStatus == nil {
		var ret StatusIngestStatusSecondaryStatus
		return ret
	}
	return *o.SecondaryStatus
}

// GetSecondaryStatusOk returns a tuple with the SecondaryStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusIngestStatus) GetSecondaryStatusOk() (*StatusIngestStatusSecondaryStatus, bool) {
	if o == nil || o.SecondaryStatus == nil {
		return nil, false
	}
	return o.SecondaryStatus, true
}

// HasSecondaryStatus returns a boolean if a field has been set.
func (o *StatusIngestStatus) HasSecondaryStatus() bool {
	if o != nil && o.SecondaryStatus != nil {
		return true
	}

	return false
}

// SetSecondaryStatus gets a reference to the given StatusIngestStatusSecondaryStatus and assigns it to the SecondaryStatus field.
func (o *StatusIngestStatus) SetSecondaryStatus(v StatusIngestStatusSecondaryStatus) {
	o.SecondaryStatus = &v
}

// GetSourceLossSlateStatus returns the SourceLossSlateStatus field value if set, zero value otherwise.
func (o *StatusIngestStatus) GetSourceLossSlateStatus() StatusIngestStatusSourceLossSlateStatus {
	if o == nil || o.SourceLossSlateStatus == nil {
		var ret StatusIngestStatusSourceLossSlateStatus
		return ret
	}
	return *o.SourceLossSlateStatus
}

// GetSourceLossSlateStatusOk returns a tuple with the SourceLossSlateStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusIngestStatus) GetSourceLossSlateStatusOk() (*StatusIngestStatusSourceLossSlateStatus, bool) {
	if o == nil || o.SourceLossSlateStatus == nil {
		return nil, false
	}
	return o.SourceLossSlateStatus, true
}

// HasSourceLossSlateStatus returns a boolean if a field has been set.
func (o *StatusIngestStatus) HasSourceLossSlateStatus() bool {
	if o != nil && o.SourceLossSlateStatus != nil {
		return true
	}

	return false
}

// SetSourceLossSlateStatus gets a reference to the given StatusIngestStatusSourceLossSlateStatus and assigns it to the SourceLossSlateStatus field.
func (o *StatusIngestStatus) SetSourceLossSlateStatus(v StatusIngestStatusSourceLossSlateStatus) {
	o.SourceLossSlateStatus = &v
}

// GetSourceMergingActive returns the SourceMergingActive field value if set, zero value otherwise.
func (o *StatusIngestStatus) GetSourceMergingActive() bool {
	if o == nil || o.SourceMergingActive == nil {
		var ret bool
		return ret
	}
	return *o.SourceMergingActive
}

// GetSourceMergingActiveOk returns a tuple with the SourceMergingActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusIngestStatus) GetSourceMergingActiveOk() (*bool, bool) {
	if o == nil || o.SourceMergingActive == nil {
		return nil, false
	}
	return o.SourceMergingActive, true
}

// HasSourceMergingActive returns a boolean if a field has been set.
func (o *StatusIngestStatus) HasSourceMergingActive() bool {
	if o != nil && o.SourceMergingActive != nil {
		return true
	}

	return false
}

// SetSourceMergingActive gets a reference to the given bool and assigns it to the SourceMergingActive field.
func (o *StatusIngestStatus) SetSourceMergingActive(v bool) {
	o.SourceMergingActive = &v
}

// GetSourceMergingDisabled returns the SourceMergingDisabled field value if set, zero value otherwise.
func (o *StatusIngestStatus) GetSourceMergingDisabled() bool {
	if o == nil || o.SourceMergingDisabled == nil {
		var ret bool
		return ret
	}
	return *o.SourceMergingDisabled
}

// GetSourceMergingDisabledOk returns a tuple with the SourceMergingDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusIngestStatus) GetSourceMergingDisabledOk() (*bool, bool) {
	if o == nil || o.SourceMergingDisabled == nil {
		return nil, false
	}
	return o.SourceMergingDisabled, true
}

// HasSourceMergingDisabled returns a boolean if a field has been set.
func (o *StatusIngestStatus) HasSourceMergingDisabled() bool {
	if o != nil && o.SourceMergingDisabled != nil {
		return true
	}

	return false
}

// SetSourceMergingDisabled gets a reference to the given bool and assigns it to the SourceMergingDisabled field.
func (o *StatusIngestStatus) SetSourceMergingDisabled(v bool) {
	o.SourceMergingDisabled = &v
}

func (o StatusIngestStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PrimaryStatus != nil {
		toSerialize["primary_status"] = o.PrimaryStatus
	}
	if o.SecondaryStatus != nil {
		toSerialize["secondary_status"] = o.SecondaryStatus
	}
	if o.SourceLossSlateStatus != nil {
		toSerialize["source_loss_slate_status"] = o.SourceLossSlateStatus
	}
	if o.SourceMergingActive != nil {
		toSerialize["source_merging_active"] = o.SourceMergingActive
	}
	if o.SourceMergingDisabled != nil {
		toSerialize["source_merging_disabled"] = o.SourceMergingDisabled
	}
	return json.Marshal(toSerialize)
}

type NullableStatusIngestStatus struct {
	value *StatusIngestStatus
	isSet bool
}

func (v NullableStatusIngestStatus) Get() *StatusIngestStatus {
	return v.value
}

func (v *NullableStatusIngestStatus) Set(val *StatusIngestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusIngestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusIngestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusIngestStatus(val *StatusIngestStatus) *NullableStatusIngestStatus {
	return &NullableStatusIngestStatus{value: val, isSet: true}
}

func (v NullableStatusIngestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusIngestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


