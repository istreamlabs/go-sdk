/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 * Contact: support@istreamplanet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// ChannelSignaling Signaling configures in-band signaling (i.e. SCTE-35).
type ChannelSignaling struct {
	BlackoutSettings *ChannelSignalingBlackoutSettings `json:"blackout_settings,omitempty"`
	// Disable parsing SCTE-35 in-band signaling. Out-of-band signaling is still allowed.
	DisableInbandParsing *bool `json:"disable_inband_parsing,omitempty"`
	// Defines the specific PID containing the SCTE that the transcoder should process. Using '0' (default value) will pick the first PID containing SCTE-35 in the PMT.
	SctePid *int32 `json:"scte_pid,omitempty"`
	// Settings that apply to specific segments.
	SegmentSettings []ChannelSignalingSegmentSettingsInner `json:"segment_settings,omitempty"`
	// Segment types to process for in-band signaling.
	Segments []string `json:"segments,omitempty"`
}

// NewChannelSignaling instantiates a new ChannelSignaling object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelSignaling() *ChannelSignaling {
	this := ChannelSignaling{}
	return &this
}

// NewChannelSignalingWithDefaults instantiates a new ChannelSignaling object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelSignalingWithDefaults() *ChannelSignaling {
	this := ChannelSignaling{}
	return &this
}

// GetBlackoutSettings returns the BlackoutSettings field value if set, zero value otherwise.
func (o *ChannelSignaling) GetBlackoutSettings() ChannelSignalingBlackoutSettings {
	if o == nil || o.BlackoutSettings == nil {
		var ret ChannelSignalingBlackoutSettings
		return ret
	}
	return *o.BlackoutSettings
}

// GetBlackoutSettingsOk returns a tuple with the BlackoutSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelSignaling) GetBlackoutSettingsOk() (*ChannelSignalingBlackoutSettings, bool) {
	if o == nil || o.BlackoutSettings == nil {
		return nil, false
	}
	return o.BlackoutSettings, true
}

// HasBlackoutSettings returns a boolean if a field has been set.
func (o *ChannelSignaling) HasBlackoutSettings() bool {
	if o != nil && o.BlackoutSettings != nil {
		return true
	}

	return false
}

// SetBlackoutSettings gets a reference to the given ChannelSignalingBlackoutSettings and assigns it to the BlackoutSettings field.
func (o *ChannelSignaling) SetBlackoutSettings(v ChannelSignalingBlackoutSettings) {
	o.BlackoutSettings = &v
}

// GetDisableInbandParsing returns the DisableInbandParsing field value if set, zero value otherwise.
func (o *ChannelSignaling) GetDisableInbandParsing() bool {
	if o == nil || o.DisableInbandParsing == nil {
		var ret bool
		return ret
	}
	return *o.DisableInbandParsing
}

// GetDisableInbandParsingOk returns a tuple with the DisableInbandParsing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelSignaling) GetDisableInbandParsingOk() (*bool, bool) {
	if o == nil || o.DisableInbandParsing == nil {
		return nil, false
	}
	return o.DisableInbandParsing, true
}

// HasDisableInbandParsing returns a boolean if a field has been set.
func (o *ChannelSignaling) HasDisableInbandParsing() bool {
	if o != nil && o.DisableInbandParsing != nil {
		return true
	}

	return false
}

// SetDisableInbandParsing gets a reference to the given bool and assigns it to the DisableInbandParsing field.
func (o *ChannelSignaling) SetDisableInbandParsing(v bool) {
	o.DisableInbandParsing = &v
}

// GetSctePid returns the SctePid field value if set, zero value otherwise.
func (o *ChannelSignaling) GetSctePid() int32 {
	if o == nil || o.SctePid == nil {
		var ret int32
		return ret
	}
	return *o.SctePid
}

// GetSctePidOk returns a tuple with the SctePid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelSignaling) GetSctePidOk() (*int32, bool) {
	if o == nil || o.SctePid == nil {
		return nil, false
	}
	return o.SctePid, true
}

// HasSctePid returns a boolean if a field has been set.
func (o *ChannelSignaling) HasSctePid() bool {
	if o != nil && o.SctePid != nil {
		return true
	}

	return false
}

// SetSctePid gets a reference to the given int32 and assigns it to the SctePid field.
func (o *ChannelSignaling) SetSctePid(v int32) {
	o.SctePid = &v
}

// GetSegmentSettings returns the SegmentSettings field value if set, zero value otherwise.
func (o *ChannelSignaling) GetSegmentSettings() []ChannelSignalingSegmentSettingsInner {
	if o == nil || o.SegmentSettings == nil {
		var ret []ChannelSignalingSegmentSettingsInner
		return ret
	}
	return o.SegmentSettings
}

// GetSegmentSettingsOk returns a tuple with the SegmentSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelSignaling) GetSegmentSettingsOk() ([]ChannelSignalingSegmentSettingsInner, bool) {
	if o == nil || o.SegmentSettings == nil {
		return nil, false
	}
	return o.SegmentSettings, true
}

// HasSegmentSettings returns a boolean if a field has been set.
func (o *ChannelSignaling) HasSegmentSettings() bool {
	if o != nil && o.SegmentSettings != nil {
		return true
	}

	return false
}

// SetSegmentSettings gets a reference to the given []ChannelSignalingSegmentSettingsInner and assigns it to the SegmentSettings field.
func (o *ChannelSignaling) SetSegmentSettings(v []ChannelSignalingSegmentSettingsInner) {
	o.SegmentSettings = v
}

// GetSegments returns the Segments field value if set, zero value otherwise.
func (o *ChannelSignaling) GetSegments() []string {
	if o == nil || o.Segments == nil {
		var ret []string
		return ret
	}
	return o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelSignaling) GetSegmentsOk() ([]string, bool) {
	if o == nil || o.Segments == nil {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *ChannelSignaling) HasSegments() bool {
	if o != nil && o.Segments != nil {
		return true
	}

	return false
}

// SetSegments gets a reference to the given []string and assigns it to the Segments field.
func (o *ChannelSignaling) SetSegments(v []string) {
	o.Segments = v
}

func (o ChannelSignaling) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BlackoutSettings != nil {
		toSerialize["blackout_settings"] = o.BlackoutSettings
	}
	if o.DisableInbandParsing != nil {
		toSerialize["disable_inband_parsing"] = o.DisableInbandParsing
	}
	if o.SctePid != nil {
		toSerialize["scte_pid"] = o.SctePid
	}
	if o.SegmentSettings != nil {
		toSerialize["segment_settings"] = o.SegmentSettings
	}
	if o.Segments != nil {
		toSerialize["segments"] = o.Segments
	}
	return json.Marshal(toSerialize)
}

type NullableChannelSignaling struct {
	value *ChannelSignaling
	isSet bool
}

func (v NullableChannelSignaling) Get() *ChannelSignaling {
	return v.value
}

func (v *NullableChannelSignaling) Set(val *ChannelSignaling) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelSignaling) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelSignaling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelSignaling(val *ChannelSignaling) *NullableChannelSignaling {
	return &NullableChannelSignaling{value: val, isSet: true}
}

func (v NullableChannelSignaling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelSignaling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


