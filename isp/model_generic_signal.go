/*
 * WBD Aventus Channels API
 *
 * API version: 0.0.0
 * Contact: live-control-plane-devs@wbd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// checks if the GenericSignal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenericSignal{}

// GenericSignal struct for GenericSignal
type GenericSignal struct {
	// Splice duration (ms). If no duration or a duration of 0 then the default duration for the segment type is used.
	Duration *int32 `json:"duration,omitempty" format:"int32" default:"0" doc:"Splice duration (ms). If no duration or a duration of 0 then the default duration for the segment type is used."`
	// Identifies the active signaling segment. Use the same event_id for both START and END to reference the same segment. When signaling two STARTs with the same event_id, the second one will result in an error (ALREADY_EXISTS). Signaling a second start with a different event_id will end a previous active segment of the same type. After a segment has ended, its event_id can be reused. IDs are namespaced by segment type. E.g. it is allowed to have an active Chapter and an active Program with the same event_id. This field corresponds to SCTE-35 segmentation_event_id and splice_event_id.
	EventId int32 `json:"event_id" format:"int32" minimum:"0" doc:"Identifies the active signaling segment. Use the same event_id for both START and END to reference the same segment. When signaling two STARTs with the same event_id, the second one will result in an error (ALREADY_EXISTS). Signaling a second start with a different event_id will end a previous active segment of the same type. After a segment has ended, its event_id can be reused. IDs are namespaced by segment type. E.g. it is allowed to have an active Chapter and an active Program with the same event_id. This field corresponds to SCTE-35 segmentation_event_id and splice_event_id."`
	// The signaling segment type which is going to start/end/etc. This is used to mark programs, chapters, ad insertion points, video slating, etc.
	SegmentType string `json:"segment_type" enum:"splice_insert,content_id,program,program_breakaway,chapter,break,opening_credit,closing_credit,provider_placement,distributor_placement,provider_overlay,distributor_overlay,provider_ad,distributor_ad,unscheduled_event,network,slate,timed_metadata" doc:"The signaling segment type which is going to start/end/etc. This is used to mark programs, chapters, ad insertion points, video slating, etc."`
	// Whether this signal will start/end/etc a signaling segment
	SignalType string `json:"signal_type" enum:"start,end,breakaway,resumption" doc:"Whether this signal will start/end/etc a signaling segment"`
	// Slate url
	SlateUri *string `json:"slate_uri,omitempty" format:"uri" doc:"Slate url"`
	// Timed metadata opaque payload data
	TimedMetadataPayload *string `json:"timed_metadata_payload,omitempty" doc:"Timed metadata opaque payload data"`
	// The timed metadata signal's type
	TimedMetadataType *string `json:"timed_metadata_type,omitempty" doc:"The timed metadata signal's type"`
	// Qualifier type
	Type *string `json:"type,omitempty" enum:"none,overlap,in_progress" doc:"Qualifier type"`
	// UPIDs
	Upids []string `json:"upids,omitempty" doc:"UPIDs"`
}

// NewGenericSignal instantiates a new GenericSignal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenericSignal(eventId int32, segmentType string, signalType string) *GenericSignal {
	this := GenericSignal{}
	var duration int32 = 0
	this.Duration = &duration
	this.EventId = eventId
	this.SegmentType = segmentType
	this.SignalType = signalType
	return &this
}

// NewGenericSignalWithDefaults instantiates a new GenericSignal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenericSignalWithDefaults() *GenericSignal {
	this := GenericSignal{}
	var duration int32 = 0
	this.Duration = &duration
	return &this
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *GenericSignal) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericSignal) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *GenericSignal) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *GenericSignal) SetDuration(v int32) {
	o.Duration = &v
}

// GetEventId returns the EventId field value
func (o *GenericSignal) GetEventId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *GenericSignal) GetEventIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *GenericSignal) SetEventId(v int32) {
	o.EventId = v
}

// GetSegmentType returns the SegmentType field value
func (o *GenericSignal) GetSegmentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SegmentType
}

// GetSegmentTypeOk returns a tuple with the SegmentType field value
// and a boolean to check if the value has been set.
func (o *GenericSignal) GetSegmentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SegmentType, true
}

// SetSegmentType sets field value
func (o *GenericSignal) SetSegmentType(v string) {
	o.SegmentType = v
}

// GetSignalType returns the SignalType field value
func (o *GenericSignal) GetSignalType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignalType
}

// GetSignalTypeOk returns a tuple with the SignalType field value
// and a boolean to check if the value has been set.
func (o *GenericSignal) GetSignalTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignalType, true
}

// SetSignalType sets field value
func (o *GenericSignal) SetSignalType(v string) {
	o.SignalType = v
}

// GetSlateUri returns the SlateUri field value if set, zero value otherwise.
func (o *GenericSignal) GetSlateUri() string {
	if o == nil || IsNil(o.SlateUri) {
		var ret string
		return ret
	}
	return *o.SlateUri
}

// GetSlateUriOk returns a tuple with the SlateUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericSignal) GetSlateUriOk() (*string, bool) {
	if o == nil || IsNil(o.SlateUri) {
		return nil, false
	}
	return o.SlateUri, true
}

// HasSlateUri returns a boolean if a field has been set.
func (o *GenericSignal) HasSlateUri() bool {
	if o != nil && !IsNil(o.SlateUri) {
		return true
	}

	return false
}

// SetSlateUri gets a reference to the given string and assigns it to the SlateUri field.
func (o *GenericSignal) SetSlateUri(v string) {
	o.SlateUri = &v
}

// GetTimedMetadataPayload returns the TimedMetadataPayload field value if set, zero value otherwise.
func (o *GenericSignal) GetTimedMetadataPayload() string {
	if o == nil || IsNil(o.TimedMetadataPayload) {
		var ret string
		return ret
	}
	return *o.TimedMetadataPayload
}

// GetTimedMetadataPayloadOk returns a tuple with the TimedMetadataPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericSignal) GetTimedMetadataPayloadOk() (*string, bool) {
	if o == nil || IsNil(o.TimedMetadataPayload) {
		return nil, false
	}
	return o.TimedMetadataPayload, true
}

// HasTimedMetadataPayload returns a boolean if a field has been set.
func (o *GenericSignal) HasTimedMetadataPayload() bool {
	if o != nil && !IsNil(o.TimedMetadataPayload) {
		return true
	}

	return false
}

// SetTimedMetadataPayload gets a reference to the given string and assigns it to the TimedMetadataPayload field.
func (o *GenericSignal) SetTimedMetadataPayload(v string) {
	o.TimedMetadataPayload = &v
}

// GetTimedMetadataType returns the TimedMetadataType field value if set, zero value otherwise.
func (o *GenericSignal) GetTimedMetadataType() string {
	if o == nil || IsNil(o.TimedMetadataType) {
		var ret string
		return ret
	}
	return *o.TimedMetadataType
}

// GetTimedMetadataTypeOk returns a tuple with the TimedMetadataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericSignal) GetTimedMetadataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TimedMetadataType) {
		return nil, false
	}
	return o.TimedMetadataType, true
}

// HasTimedMetadataType returns a boolean if a field has been set.
func (o *GenericSignal) HasTimedMetadataType() bool {
	if o != nil && !IsNil(o.TimedMetadataType) {
		return true
	}

	return false
}

// SetTimedMetadataType gets a reference to the given string and assigns it to the TimedMetadataType field.
func (o *GenericSignal) SetTimedMetadataType(v string) {
	o.TimedMetadataType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GenericSignal) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericSignal) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GenericSignal) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GenericSignal) SetType(v string) {
	o.Type = &v
}

// GetUpids returns the Upids field value if set, zero value otherwise.
func (o *GenericSignal) GetUpids() []string {
	if o == nil || IsNil(o.Upids) {
		var ret []string
		return ret
	}
	return o.Upids
}

// GetUpidsOk returns a tuple with the Upids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericSignal) GetUpidsOk() ([]string, bool) {
	if o == nil || IsNil(o.Upids) {
		return nil, false
	}
	return o.Upids, true
}

// HasUpids returns a boolean if a field has been set.
func (o *GenericSignal) HasUpids() bool {
	if o != nil && !IsNil(o.Upids) {
		return true
	}

	return false
}

// SetUpids gets a reference to the given []string and assigns it to the Upids field.
func (o *GenericSignal) SetUpids(v []string) {
	o.Upids = v
}

func (o GenericSignal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenericSignal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	toSerialize["event_id"] = o.EventId
	toSerialize["segment_type"] = o.SegmentType
	toSerialize["signal_type"] = o.SignalType
	if !IsNil(o.SlateUri) {
		toSerialize["slate_uri"] = o.SlateUri
	}
	if !IsNil(o.TimedMetadataPayload) {
		toSerialize["timed_metadata_payload"] = o.TimedMetadataPayload
	}
	if !IsNil(o.TimedMetadataType) {
		toSerialize["timed_metadata_type"] = o.TimedMetadataType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Upids) {
		toSerialize["upids"] = o.Upids
	}
	return toSerialize, nil
}

type NullableGenericSignal struct {
	value *GenericSignal
	isSet bool
}

func (v NullableGenericSignal) Get() *GenericSignal {
	return v.value
}

func (v *NullableGenericSignal) Set(val *GenericSignal) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericSignal) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericSignal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericSignal(val *GenericSignal) *NullableGenericSignal {
	return &NullableGenericSignal{value: val, isSet: true}
}

func (v NullableGenericSignal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericSignal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


