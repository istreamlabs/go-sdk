/*
 * WBD Aventus Channels API
 *
 * API version: v1.19.22
 * Contact: live-control-plane-devs@wbd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// checks if the ChannelPackagingPackagersValueContentProtectionKeyRotation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelPackagingPackagersValueContentProtectionKeyRotation{}

// ChannelPackagingPackagersValueContentProtectionKeyRotation Configures how keys should be rotated
type ChannelPackagingPackagersValueContentProtectionKeyRotation struct {
	// Rotate keys based on the specified time interval. If Program is also provided then this time interval will only apply to media segments that are outside of program boundaries. If Program is NOT provided then only this time interval will be used to decided when to rotate keys.
	IntervalSecs *float32 `json:"interval_secs,omitempty" format:"float" minimum:"300" doc:"Rotate keys based on the specified time interval. If Program is also provided then this time interval will only apply to media segments that are outside of program boundaries. If Program is NOT provided then only this time interval will be used to decided when to rotate keys."`
	// Rotate keys on (SCTE35) program boundaries such that no two programs will be protected with the same key.
	Program *bool `json:"program,omitempty" doc:"Rotate keys on (SCTE35) program boundaries such that no two programs will be protected with the same key."`
	// Do not encrypt segments that are part of more than one SCTE-35 program.
	ProgramOverlapSkipEncrypt *bool `json:"program_overlap_skip_encrypt,omitempty" doc:"Do not encrypt segments that are part of more than one SCTE-35 program."`
}

// NewChannelPackagingPackagersValueContentProtectionKeyRotation instantiates a new ChannelPackagingPackagersValueContentProtectionKeyRotation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelPackagingPackagersValueContentProtectionKeyRotation() *ChannelPackagingPackagersValueContentProtectionKeyRotation {
	this := ChannelPackagingPackagersValueContentProtectionKeyRotation{}
	return &this
}

// NewChannelPackagingPackagersValueContentProtectionKeyRotationWithDefaults instantiates a new ChannelPackagingPackagersValueContentProtectionKeyRotation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelPackagingPackagersValueContentProtectionKeyRotationWithDefaults() *ChannelPackagingPackagersValueContentProtectionKeyRotation {
	this := ChannelPackagingPackagersValueContentProtectionKeyRotation{}
	return &this
}

// GetIntervalSecs returns the IntervalSecs field value if set, zero value otherwise.
func (o *ChannelPackagingPackagersValueContentProtectionKeyRotation) GetIntervalSecs() float32 {
	if o == nil || IsNil(o.IntervalSecs) {
		var ret float32
		return ret
	}
	return *o.IntervalSecs
}

// GetIntervalSecsOk returns a tuple with the IntervalSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPackagingPackagersValueContentProtectionKeyRotation) GetIntervalSecsOk() (*float32, bool) {
	if o == nil || IsNil(o.IntervalSecs) {
		return nil, false
	}
	return o.IntervalSecs, true
}

// HasIntervalSecs returns a boolean if a field has been set.
func (o *ChannelPackagingPackagersValueContentProtectionKeyRotation) HasIntervalSecs() bool {
	if o != nil && !IsNil(o.IntervalSecs) {
		return true
	}

	return false
}

// SetIntervalSecs gets a reference to the given float32 and assigns it to the IntervalSecs field.
func (o *ChannelPackagingPackagersValueContentProtectionKeyRotation) SetIntervalSecs(v float32) {
	o.IntervalSecs = &v
}

// GetProgram returns the Program field value if set, zero value otherwise.
func (o *ChannelPackagingPackagersValueContentProtectionKeyRotation) GetProgram() bool {
	if o == nil || IsNil(o.Program) {
		var ret bool
		return ret
	}
	return *o.Program
}

// GetProgramOk returns a tuple with the Program field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPackagingPackagersValueContentProtectionKeyRotation) GetProgramOk() (*bool, bool) {
	if o == nil || IsNil(o.Program) {
		return nil, false
	}
	return o.Program, true
}

// HasProgram returns a boolean if a field has been set.
func (o *ChannelPackagingPackagersValueContentProtectionKeyRotation) HasProgram() bool {
	if o != nil && !IsNil(o.Program) {
		return true
	}

	return false
}

// SetProgram gets a reference to the given bool and assigns it to the Program field.
func (o *ChannelPackagingPackagersValueContentProtectionKeyRotation) SetProgram(v bool) {
	o.Program = &v
}

// GetProgramOverlapSkipEncrypt returns the ProgramOverlapSkipEncrypt field value if set, zero value otherwise.
func (o *ChannelPackagingPackagersValueContentProtectionKeyRotation) GetProgramOverlapSkipEncrypt() bool {
	if o == nil || IsNil(o.ProgramOverlapSkipEncrypt) {
		var ret bool
		return ret
	}
	return *o.ProgramOverlapSkipEncrypt
}

// GetProgramOverlapSkipEncryptOk returns a tuple with the ProgramOverlapSkipEncrypt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPackagingPackagersValueContentProtectionKeyRotation) GetProgramOverlapSkipEncryptOk() (*bool, bool) {
	if o == nil || IsNil(o.ProgramOverlapSkipEncrypt) {
		return nil, false
	}
	return o.ProgramOverlapSkipEncrypt, true
}

// HasProgramOverlapSkipEncrypt returns a boolean if a field has been set.
func (o *ChannelPackagingPackagersValueContentProtectionKeyRotation) HasProgramOverlapSkipEncrypt() bool {
	if o != nil && !IsNil(o.ProgramOverlapSkipEncrypt) {
		return true
	}

	return false
}

// SetProgramOverlapSkipEncrypt gets a reference to the given bool and assigns it to the ProgramOverlapSkipEncrypt field.
func (o *ChannelPackagingPackagersValueContentProtectionKeyRotation) SetProgramOverlapSkipEncrypt(v bool) {
	o.ProgramOverlapSkipEncrypt = &v
}

func (o ChannelPackagingPackagersValueContentProtectionKeyRotation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelPackagingPackagersValueContentProtectionKeyRotation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IntervalSecs) {
		toSerialize["interval_secs"] = o.IntervalSecs
	}
	if !IsNil(o.Program) {
		toSerialize["program"] = o.Program
	}
	if !IsNil(o.ProgramOverlapSkipEncrypt) {
		toSerialize["program_overlap_skip_encrypt"] = o.ProgramOverlapSkipEncrypt
	}
	return toSerialize, nil
}

type NullableChannelPackagingPackagersValueContentProtectionKeyRotation struct {
	value *ChannelPackagingPackagersValueContentProtectionKeyRotation
	isSet bool
}

func (v NullableChannelPackagingPackagersValueContentProtectionKeyRotation) Get() *ChannelPackagingPackagersValueContentProtectionKeyRotation {
	return v.value
}

func (v *NullableChannelPackagingPackagersValueContentProtectionKeyRotation) Set(val *ChannelPackagingPackagersValueContentProtectionKeyRotation) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelPackagingPackagersValueContentProtectionKeyRotation) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelPackagingPackagersValueContentProtectionKeyRotation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelPackagingPackagersValueContentProtectionKeyRotation(val *ChannelPackagingPackagersValueContentProtectionKeyRotation) *NullableChannelPackagingPackagersValueContentProtectionKeyRotation {
	return &NullableChannelPackagingPackagersValueContentProtectionKeyRotation{value: val, isSet: true}
}

func (v NullableChannelPackagingPackagersValueContentProtectionKeyRotation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelPackagingPackagersValueContentProtectionKeyRotation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


