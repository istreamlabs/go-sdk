/*
 * WBD Aventus Channels API
 *
 * API version: 0.0.0
 * Contact: live-control-plane-devs@wbd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// checks if the ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner{}

// ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner struct for ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner
type ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner struct {
	// Control the clipping of whites. A positive value will clip highlights and bright whites less, while a negative value will clip more.
	ClipTrim *float64 `json:"clip_trim,omitempty" format:"double" minimum:"-1" maximum:"1" doc:"Control the clipping of whites. A positive value will clip highlights and bright whites less, while a negative value will clip more."`
	// Amount of multiscale detail to apply. This is offset from the values used in Dolby documentation so that the Protobuf default of 0.0 corresponds to the Dolby default of -1.0. Values > 1.0 will retain more details when Dolby Vision is mapping down to a lower luminance. Values < 1.0 will lower detail contrast when Dolby Vision is mapping down to a lower luminance. The special value of 0.0 will disable multiscale detail.
	MsWeightPlusOne *float64 `json:"ms_weight_plus_one,omitempty" format:"double" minimum:"0" maximum:"2" doc:"Amount of multiscale detail to apply. This is offset from the values used in Dolby documentation so that the Protobuf default of 0.0 corresponds to the Dolby default of -1.0. Values > 1.0 will retain more details when Dolby Vision is mapping down to a lower luminance. Values < 1.0 will lower detail contrast when Dolby Vision is mapping down to a lower luminance. The special value of 0.0 will disable multiscale detail."`
	// Identifies which Level 8 trim target is being configured.
	Target *string `json:"target,omitempty" enum:"REC709_100NITS,BT2020_600NITS,BT2020_1000NITS,CUSTOM" doc:"Identifies which Level 8 trim target is being configured."`
	// Controls the contrast of midtones. A positive value will increase the midtone contrast, while a negative value will decrease the midtone contrast.
	TargetMidContrast *float64 `json:"target_mid_contrast,omitempty" format:"double" minimum:"-1" maximum:"1" doc:"Controls the contrast of midtones. A positive value will increase the midtone contrast, while a negative value will decrease the midtone contrast."`
	// ChromaWeight to apply. Additional mapping for saturated colors. Higher value implies stronger effect.
	TrimChromaWeight *float64 `json:"trim_chroma_weight,omitempty" format:"double" minimum:"-1" maximum:"1" doc:"ChromaWeight to apply. Additional mapping for saturated colors. Higher value implies stronger effect."`
	// Gain to apply. This is a scaling factor for code values in a color component.
	TrimGain *float64 `json:"trim_gain,omitempty" format:"double" minimum:"-1" maximum:"1" doc:"Gain to apply. This is a scaling factor for code values in a color component."`
	// Gamma to apply. This is a power function in normalized code value in a color component.
	TrimGamma *float64 `json:"trim_gamma,omitempty" format:"double" minimum:"-1" maximum:"1" doc:"Gamma to apply. This is a power function in normalized code value in a color component."`
	// Lift to apply. This is an offset of code values in a color component.
	TrimLift *float64 `json:"trim_lift,omitempty" format:"double" minimum:"-1" maximum:"1" doc:"Lift to apply. This is an offset of code values in a color component."`
	// Saturation gain to apply. Gain on P and T components. Higher value implies stronger effect.
	TrimSaturationGain *float64 `json:"trim_saturation_gain,omitempty" format:"double" minimum:"-1" maximum:"1" doc:"Saturation gain to apply. Gain on P and T components. Higher value implies stronger effect."`
}

// NewChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner instantiates a new ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner() *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner {
	this := ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner{}
	return &this
}

// NewChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8InnerWithDefaults instantiates a new ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8InnerWithDefaults() *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner {
	this := ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner{}
	return &this
}

// GetClipTrim returns the ClipTrim field value if set, zero value otherwise.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetClipTrim() float64 {
	if o == nil || IsNil(o.ClipTrim) {
		var ret float64
		return ret
	}
	return *o.ClipTrim
}

// GetClipTrimOk returns a tuple with the ClipTrim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetClipTrimOk() (*float64, bool) {
	if o == nil || IsNil(o.ClipTrim) {
		return nil, false
	}
	return o.ClipTrim, true
}

// HasClipTrim returns a boolean if a field has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) HasClipTrim() bool {
	if o != nil && !IsNil(o.ClipTrim) {
		return true
	}

	return false
}

// SetClipTrim gets a reference to the given float64 and assigns it to the ClipTrim field.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) SetClipTrim(v float64) {
	o.ClipTrim = &v
}

// GetMsWeightPlusOne returns the MsWeightPlusOne field value if set, zero value otherwise.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetMsWeightPlusOne() float64 {
	if o == nil || IsNil(o.MsWeightPlusOne) {
		var ret float64
		return ret
	}
	return *o.MsWeightPlusOne
}

// GetMsWeightPlusOneOk returns a tuple with the MsWeightPlusOne field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetMsWeightPlusOneOk() (*float64, bool) {
	if o == nil || IsNil(o.MsWeightPlusOne) {
		return nil, false
	}
	return o.MsWeightPlusOne, true
}

// HasMsWeightPlusOne returns a boolean if a field has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) HasMsWeightPlusOne() bool {
	if o != nil && !IsNil(o.MsWeightPlusOne) {
		return true
	}

	return false
}

// SetMsWeightPlusOne gets a reference to the given float64 and assigns it to the MsWeightPlusOne field.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) SetMsWeightPlusOne(v float64) {
	o.MsWeightPlusOne = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) SetTarget(v string) {
	o.Target = &v
}

// GetTargetMidContrast returns the TargetMidContrast field value if set, zero value otherwise.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetTargetMidContrast() float64 {
	if o == nil || IsNil(o.TargetMidContrast) {
		var ret float64
		return ret
	}
	return *o.TargetMidContrast
}

// GetTargetMidContrastOk returns a tuple with the TargetMidContrast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetTargetMidContrastOk() (*float64, bool) {
	if o == nil || IsNil(o.TargetMidContrast) {
		return nil, false
	}
	return o.TargetMidContrast, true
}

// HasTargetMidContrast returns a boolean if a field has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) HasTargetMidContrast() bool {
	if o != nil && !IsNil(o.TargetMidContrast) {
		return true
	}

	return false
}

// SetTargetMidContrast gets a reference to the given float64 and assigns it to the TargetMidContrast field.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) SetTargetMidContrast(v float64) {
	o.TargetMidContrast = &v
}

// GetTrimChromaWeight returns the TrimChromaWeight field value if set, zero value otherwise.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetTrimChromaWeight() float64 {
	if o == nil || IsNil(o.TrimChromaWeight) {
		var ret float64
		return ret
	}
	return *o.TrimChromaWeight
}

// GetTrimChromaWeightOk returns a tuple with the TrimChromaWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetTrimChromaWeightOk() (*float64, bool) {
	if o == nil || IsNil(o.TrimChromaWeight) {
		return nil, false
	}
	return o.TrimChromaWeight, true
}

// HasTrimChromaWeight returns a boolean if a field has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) HasTrimChromaWeight() bool {
	if o != nil && !IsNil(o.TrimChromaWeight) {
		return true
	}

	return false
}

// SetTrimChromaWeight gets a reference to the given float64 and assigns it to the TrimChromaWeight field.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) SetTrimChromaWeight(v float64) {
	o.TrimChromaWeight = &v
}

// GetTrimGain returns the TrimGain field value if set, zero value otherwise.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetTrimGain() float64 {
	if o == nil || IsNil(o.TrimGain) {
		var ret float64
		return ret
	}
	return *o.TrimGain
}

// GetTrimGainOk returns a tuple with the TrimGain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetTrimGainOk() (*float64, bool) {
	if o == nil || IsNil(o.TrimGain) {
		return nil, false
	}
	return o.TrimGain, true
}

// HasTrimGain returns a boolean if a field has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) HasTrimGain() bool {
	if o != nil && !IsNil(o.TrimGain) {
		return true
	}

	return false
}

// SetTrimGain gets a reference to the given float64 and assigns it to the TrimGain field.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) SetTrimGain(v float64) {
	o.TrimGain = &v
}

// GetTrimGamma returns the TrimGamma field value if set, zero value otherwise.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetTrimGamma() float64 {
	if o == nil || IsNil(o.TrimGamma) {
		var ret float64
		return ret
	}
	return *o.TrimGamma
}

// GetTrimGammaOk returns a tuple with the TrimGamma field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetTrimGammaOk() (*float64, bool) {
	if o == nil || IsNil(o.TrimGamma) {
		return nil, false
	}
	return o.TrimGamma, true
}

// HasTrimGamma returns a boolean if a field has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) HasTrimGamma() bool {
	if o != nil && !IsNil(o.TrimGamma) {
		return true
	}

	return false
}

// SetTrimGamma gets a reference to the given float64 and assigns it to the TrimGamma field.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) SetTrimGamma(v float64) {
	o.TrimGamma = &v
}

// GetTrimLift returns the TrimLift field value if set, zero value otherwise.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetTrimLift() float64 {
	if o == nil || IsNil(o.TrimLift) {
		var ret float64
		return ret
	}
	return *o.TrimLift
}

// GetTrimLiftOk returns a tuple with the TrimLift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetTrimLiftOk() (*float64, bool) {
	if o == nil || IsNil(o.TrimLift) {
		return nil, false
	}
	return o.TrimLift, true
}

// HasTrimLift returns a boolean if a field has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) HasTrimLift() bool {
	if o != nil && !IsNil(o.TrimLift) {
		return true
	}

	return false
}

// SetTrimLift gets a reference to the given float64 and assigns it to the TrimLift field.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) SetTrimLift(v float64) {
	o.TrimLift = &v
}

// GetTrimSaturationGain returns the TrimSaturationGain field value if set, zero value otherwise.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetTrimSaturationGain() float64 {
	if o == nil || IsNil(o.TrimSaturationGain) {
		var ret float64
		return ret
	}
	return *o.TrimSaturationGain
}

// GetTrimSaturationGainOk returns a tuple with the TrimSaturationGain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) GetTrimSaturationGainOk() (*float64, bool) {
	if o == nil || IsNil(o.TrimSaturationGain) {
		return nil, false
	}
	return o.TrimSaturationGain, true
}

// HasTrimSaturationGain returns a boolean if a field has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) HasTrimSaturationGain() bool {
	if o != nil && !IsNil(o.TrimSaturationGain) {
		return true
	}

	return false
}

// SetTrimSaturationGain gets a reference to the given float64 and assigns it to the TrimSaturationGain field.
func (o *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) SetTrimSaturationGain(v float64) {
	o.TrimSaturationGain = &v
}

func (o ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClipTrim) {
		toSerialize["clip_trim"] = o.ClipTrim
	}
	if !IsNil(o.MsWeightPlusOne) {
		toSerialize["ms_weight_plus_one"] = o.MsWeightPlusOne
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.TargetMidContrast) {
		toSerialize["target_mid_contrast"] = o.TargetMidContrast
	}
	if !IsNil(o.TrimChromaWeight) {
		toSerialize["trim_chroma_weight"] = o.TrimChromaWeight
	}
	if !IsNil(o.TrimGain) {
		toSerialize["trim_gain"] = o.TrimGain
	}
	if !IsNil(o.TrimGamma) {
		toSerialize["trim_gamma"] = o.TrimGamma
	}
	if !IsNil(o.TrimLift) {
		toSerialize["trim_lift"] = o.TrimLift
	}
	if !IsNil(o.TrimSaturationGain) {
		toSerialize["trim_saturation_gain"] = o.TrimSaturationGain
	}
	return toSerialize, nil
}

type NullableChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner struct {
	value *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner
	isSet bool
}

func (v NullableChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) Get() *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner {
	return v.value
}

func (v *NullableChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) Set(val *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner(val *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) *NullableChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner {
	return &NullableChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner{value: val, isSet: true}
}

func (v NullableChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelTranscodeVideoEncodersInnerH265HdrDolbyVisionProfile81Level8Inner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


