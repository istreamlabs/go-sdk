/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// ChannelTranscodeH264 H.264 codec settings.
type ChannelTranscodeH264 struct {
	// H.264 video profile, which defines various encoder features and settings. See https://en.wikipedia.org/wiki/Advanced_Video_Coding#Profiles for details.
	Profile *string `json:"profile,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChannelTranscodeH264 ChannelTranscodeH264

// NewChannelTranscodeH264 instantiates a new ChannelTranscodeH264 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelTranscodeH264() *ChannelTranscodeH264 {
	this := ChannelTranscodeH264{}
	return &this
}

// NewChannelTranscodeH264WithDefaults instantiates a new ChannelTranscodeH264 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelTranscodeH264WithDefaults() *ChannelTranscodeH264 {
	this := ChannelTranscodeH264{}
	return &this
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *ChannelTranscodeH264) GetProfile() string {
	if o == nil || o.Profile == nil {
		var ret string
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeH264) GetProfileOk() (*string, bool) {
	if o == nil || o.Profile == nil {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *ChannelTranscodeH264) HasProfile() bool {
	if o != nil && o.Profile != nil {
		return true
	}

	return false
}

// SetProfile gets a reference to the given string and assigns it to the Profile field.
func (o *ChannelTranscodeH264) SetProfile(v string) {
	o.Profile = &v
}

func (o ChannelTranscodeH264) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Profile != nil {
		toSerialize["profile"] = o.Profile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ChannelTranscodeH264) UnmarshalJSON(bytes []byte) (err error) {
	varChannelTranscodeH264 := _ChannelTranscodeH264{}

	if err = json.Unmarshal(bytes, &varChannelTranscodeH264); err == nil {
		*o = ChannelTranscodeH264(varChannelTranscodeH264)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "profile")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChannelTranscodeH264 struct {
	value *ChannelTranscodeH264
	isSet bool
}

func (v NullableChannelTranscodeH264) Get() *ChannelTranscodeH264 {
	return v.value
}

func (v *NullableChannelTranscodeH264) Set(val *ChannelTranscodeH264) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelTranscodeH264) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelTranscodeH264) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelTranscodeH264(val *ChannelTranscodeH264) *NullableChannelTranscodeH264 {
	return &NullableChannelTranscodeH264{value: val, isSet: true}
}

func (v NullableChannelTranscodeH264) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelTranscodeH264) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


