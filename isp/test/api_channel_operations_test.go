/*
iStreamPlanet Channels API

Testing ChannelOperationsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package isp

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/istreamlabs/go-sdk/isp"
)

func Test_isp_ChannelOperationsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChannelOperationsApiService ClearDvrWindow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		httpRes, err := apiClient.ChannelOperationsApi.ClearDvrWindow(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsApiService GetBetaSignalLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.ChannelOperationsApi.GetBetaSignalLogs(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsApiService GetSignals", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.ChannelOperationsApi.GetSignals(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsApiService InsertId3", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.ChannelOperationsApi.InsertId3(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsApiService InsertScte35", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		httpRes, err := apiClient.ChannelOperationsApi.InsertScte35(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsApiService PreviewImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		httpRes, err := apiClient.ChannelOperationsApi.PreviewImage(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsApiService PreviewStreams", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.ChannelOperationsApi.PreviewStreams(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsApiService ProgramEnd", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		httpRes, err := apiClient.ChannelOperationsApi.ProgramEnd(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsApiService ProgramStart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		httpRes, err := apiClient.ChannelOperationsApi.ProgramStart(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsApiService Signal", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		resp, httpRes, err := apiClient.ChannelOperationsApi.Signal(context.Background(), channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsApiService SlateIn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		httpRes, err := apiClient.ChannelOperationsApi.SlateIn(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsApiService SlateOut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		httpRes, err := apiClient.ChannelOperationsApi.SlateOut(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsApiService SpliceEnd", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		httpRes, err := apiClient.ChannelOperationsApi.SpliceEnd(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsApiService SpliceStart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelId string

		httpRes, err := apiClient.ChannelOperationsApi.SpliceStart(context.Background(), channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
