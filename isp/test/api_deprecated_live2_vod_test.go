/*
WBD Aventus Channels API

Testing DeprecatedLive2VODAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package isp

import (
	"context"
	"testing"

	openapiclient "github.com/istreamlabs/go-sdk/isp"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_isp_DeprecatedLive2VODAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DeprecatedLive2VODAPIService DeprecatedClipGetMp4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var productId string
		var programId string
		var vodId string
		var clipId string

		resp, httpRes, err := apiClient.DeprecatedLive2VODAPI.DeprecatedClipGetMp4(context.Background(), customerId, productId, programId, vodId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeprecatedLive2VODAPIService DeprecatedClipGetProgramTime", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var productId string
		var programId string
		var vodId string
		var clipId string

		resp, httpRes, err := apiClient.DeprecatedLive2VODAPI.DeprecatedClipGetProgramTime(context.Background(), customerId, productId, programId, vodId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeprecatedLive2VODAPIService DeprecatedClipMakeMp4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var productId string
		var programId string
		var vodId string
		var clipId string

		resp, httpRes, err := apiClient.DeprecatedLive2VODAPI.DeprecatedClipMakeMp4(context.Background(), customerId, productId, programId, vodId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeprecatedLive2VODAPIService DeprecatedGetClipManifest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var productId string
		var programId string
		var vodId string
		var clipId string

		resp, httpRes, err := apiClient.DeprecatedLive2VODAPI.DeprecatedGetClipManifest(context.Background(), customerId, productId, programId, vodId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeprecatedLive2VODAPIService GetDeprecatedClip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var productId string
		var programId string
		var vodId string
		var clipId string

		resp, httpRes, err := apiClient.DeprecatedLive2VODAPI.GetDeprecatedClip(context.Background(), customerId, productId, programId, vodId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeprecatedLive2VODAPIService GetDeprecatedProgram", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var productId string
		var programId string

		resp, httpRes, err := apiClient.DeprecatedLive2VODAPI.GetDeprecatedProgram(context.Background(), customerId, productId, programId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeprecatedLive2VODAPIService ListDeprecatedClips", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var productId string
		var programId string
		var vodId string

		resp, httpRes, err := apiClient.DeprecatedLive2VODAPI.ListDeprecatedClips(context.Background(), customerId, productId, programId, vodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeprecatedLive2VODAPIService ListDeprecatedVods", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var productId string
		var programId string

		resp, httpRes, err := apiClient.DeprecatedLive2VODAPI.ListDeprecatedVods(context.Background(), customerId, productId, programId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
