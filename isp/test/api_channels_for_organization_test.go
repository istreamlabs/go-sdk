/*
WBD Aventus Channels API

Testing ChannelsForOrganizationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package isp

import (
	"context"
	"testing"

	openapiclient "github.com/istreamlabs/go-sdk/isp"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_isp_ChannelsForOrganizationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChannelsForOrganizationAPIService DeleteOrgChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		httpRes, err := apiClient.ChannelsForOrganizationAPI.DeleteOrgChannel(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsForOrganizationAPIService GetOrgChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.ChannelsForOrganizationAPI.GetOrgChannel(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsForOrganizationAPIService GetOrgPlaybackConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.ChannelsForOrganizationAPI.GetOrgPlaybackConfig(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsForOrganizationAPIService ListOrgChannels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string

		resp, httpRes, err := apiClient.ChannelsForOrganizationAPI.ListOrgChannels(context.Background(), org).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsForOrganizationAPIService PatchOrgChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		httpRes, err := apiClient.ChannelsForOrganizationAPI.PatchOrgChannel(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsForOrganizationAPIService PutOrgChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		httpRes, err := apiClient.ChannelsForOrganizationAPI.PutOrgChannel(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsForOrganizationAPIService PutOrgChannelDesiredState", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		httpRes, err := apiClient.ChannelsForOrganizationAPI.PutOrgChannelDesiredState(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
