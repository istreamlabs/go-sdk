/*
WBD Aventus Channels API

Testing Live2VODForOrganizationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package isp

import (
	"context"
	"testing"

	openapiclient "github.com/istreamlabs/go-sdk/isp"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_isp_Live2VODForOrganizationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test Live2VODForOrganizationAPIService CollapseVod", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string
		var vodId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.CollapseVod(context.Background(), org, channelId, vodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService GetOrgClipManifests", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string
		var vodId string
		var clipId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.GetOrgClipManifests(context.Background(), org, channelId, vodId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService GetOrgClipPlayurl", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string
		var clipId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.GetOrgClipPlayurl(context.Background(), org, channelId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService GetOrgMp4Url", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string
		var vodId string
		var clipId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.GetOrgMp4Url(context.Background(), org, channelId, vodId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService GetOrgProduct", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var productId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.GetOrgProduct(context.Background(), org, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService GetOrgProductConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var productId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.GetOrgProductConfig(context.Background(), org, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService GetOrgProgramTasks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.GetOrgProgramTasks(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService GetOrgTask", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string
		var taskId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.GetOrgTask(context.Background(), org, channelId, taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService GetOrgVod", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string
		var vodId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.GetOrgVod(context.Background(), org, channelId, vodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService GetOrgVodClipProgramTime", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string
		var vodId string
		var clipId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.GetOrgVodClipProgramTime(context.Background(), org, channelId, vodId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService GetOrgVodClipScte35Markers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string
		var vodId string
		var clipId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.GetOrgVodClipScte35Markers(context.Background(), org, channelId, vodId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService ListOrgClips", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.ListOrgClips(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService ListOrgClipsVod", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string
		var vodId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.ListOrgClipsVod(context.Background(), org, channelId, vodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService ListOrgProducts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.ListOrgProducts(context.Background(), org).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService ListOrgProductsPrograms", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var productId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.ListOrgProductsPrograms(context.Background(), org, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService ListOrgVods", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.ListOrgVods(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService ListTasks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.ListTasks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService PostCopyMp4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string
		var vodId string
		var clipId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.PostCopyMp4(context.Background(), org, channelId, vodId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService PostOrgChannelSyndication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.PostOrgChannelSyndication(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService PostOrgClip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.PostOrgClip(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService PostOrgClipArchive", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string
		var clipId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.PostOrgClipArchive(context.Background(), org, channelId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService PostOrgMakeMp4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string
		var vodId string
		var clipId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.PostOrgMakeMp4(context.Background(), org, channelId, vodId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService PostOrgProductConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var productId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.PostOrgProductConfig(context.Background(), org, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService PostOrgTaskCancel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string
		var taskId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.PostOrgTaskCancel(context.Background(), org, channelId, taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService PostOrgTaskRetry", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string
		var taskId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.PostOrgTaskRetry(context.Background(), org, channelId, taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService PostOrgVodClip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string
		var vodId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.PostOrgVodClip(context.Background(), org, channelId, vodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationAPIService PutOrgChannelFer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationAPI.PutOrgChannelFer(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
