/*
iStreamPlanet Channels API

Testing Live2VODForOrganizationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package isp

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/isp"
)

func Test_isp_Live2VODForOrganizationApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test Live2VODForOrganizationApiService CollapseVod", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var org string
		var channelId string
		var vodId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationApi.CollapseVod(context.Background(), org, channelId, vodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationApiService GetOrgClipPlayurl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var org string
		var channelId string
		var clipId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationApi.GetOrgClipPlayurl(context.Background(), org, channelId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationApiService GetOrgMp4Url", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var org string
		var channelId string
		var vodId string
		var clipId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationApi.GetOrgMp4Url(context.Background(), org, channelId, vodId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationApiService GetOrgProgramTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationApi.GetOrgProgramTasks(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationApiService GetOrgVod", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var org string
		var channelId string
		var vodId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationApi.GetOrgVod(context.Background(), org, channelId, vodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationApiService GetOrgVodClipProgramTime", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var org string
		var channelId string
		var vodId string
		var clipId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationApi.GetOrgVodClipProgramTime(context.Background(), org, channelId, vodId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationApiService ListOrgClips", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationApi.ListOrgClips(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationApiService ListOrgProductsPrograms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var org string
		var productId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationApi.ListOrgProductsPrograms(context.Background(), org, productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationApiService ListOrgVods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationApi.ListOrgVods(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationApiService ListTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.Live2VODForOrganizationApi.ListTasks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationApiService PostOrgClip", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationApi.PostOrgClip(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationApiService PostOrgClipArchive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var org string
		var channelId string
		var clipId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationApi.PostOrgClipArchive(context.Background(), org, channelId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationApiService PostOrgMakeMp4", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var org string
		var channelId string
		var vodId string
		var clipId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationApi.PostOrgMakeMp4(context.Background(), org, channelId, vodId, clipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test Live2VODForOrganizationApiService PostOrgVodClip", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var org string
		var channelId string
		var vodId string

		resp, httpRes, err := apiClient.Live2VODForOrganizationApi.PostOrgVodClip(context.Background(), org, channelId, vodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
