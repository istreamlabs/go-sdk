/*
WBD Aventus Channels API

Testing ChannelOperationsForOrganizationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package isp

import (
	"context"
	"testing"

	openapiclient "github.com/istreamlabs/go-sdk/isp"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_isp_ChannelOperationsForOrganizationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChannelOperationsForOrganizationAPIService ClearOrgDvrWindow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		httpRes, err := apiClient.ChannelOperationsForOrganizationAPI.ClearOrgDvrWindow(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsForOrganizationAPIService GetOrgPreviewImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		httpRes, err := apiClient.ChannelOperationsForOrganizationAPI.GetOrgPreviewImage(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsForOrganizationAPIService GetOrgSignalLogs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.ChannelOperationsForOrganizationAPI.GetOrgSignalLogs(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsForOrganizationAPIService GetOrgSignals", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.ChannelOperationsForOrganizationAPI.GetOrgSignals(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsForOrganizationAPIService InsertOrgId3", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.ChannelOperationsForOrganizationAPI.InsertOrgId3(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsForOrganizationAPIService InsertOrgScte35", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		httpRes, err := apiClient.ChannelOperationsForOrganizationAPI.InsertOrgScte35(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsForOrganizationAPIService OrgGetTranscoderStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelId string
		var org string

		resp, httpRes, err := apiClient.ChannelOperationsForOrganizationAPI.OrgGetTranscoderStatus(context.Background(), channelId, org).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsForOrganizationAPIService OrgPinIngest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelId string
		var org string

		httpRes, err := apiClient.ChannelOperationsForOrganizationAPI.OrgPinIngest(context.Background(), channelId, org).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsForOrganizationAPIService OrgPreviewStreams", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.ChannelOperationsForOrganizationAPI.OrgPreviewStreams(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsForOrganizationAPIService OrgUnpinIngest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var channelId string
		var org string

		httpRes, err := apiClient.ChannelOperationsForOrganizationAPI.OrgUnpinIngest(context.Background(), channelId, org).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelOperationsForOrganizationAPIService PostOrgSignals", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var org string
		var channelId string

		resp, httpRes, err := apiClient.ChannelOperationsForOrganizationAPI.PostOrgSignals(context.Background(), org, channelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
