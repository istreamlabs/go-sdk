/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 * Contact: support@istreamplanet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// checks if the DynamicArchiveMP4RequestArchive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DynamicArchiveMP4RequestArchive{}

// DynamicArchiveMP4RequestArchive Archive settings
type DynamicArchiveMP4RequestArchive struct {
	S3 ArchiveFERRequestPackagesInnerArchiveS3 `json:"s3"`
}

// NewDynamicArchiveMP4RequestArchive instantiates a new DynamicArchiveMP4RequestArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicArchiveMP4RequestArchive(s3 ArchiveFERRequestPackagesInnerArchiveS3) *DynamicArchiveMP4RequestArchive {
	this := DynamicArchiveMP4RequestArchive{}
	this.S3 = s3
	return &this
}

// NewDynamicArchiveMP4RequestArchiveWithDefaults instantiates a new DynamicArchiveMP4RequestArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicArchiveMP4RequestArchiveWithDefaults() *DynamicArchiveMP4RequestArchive {
	this := DynamicArchiveMP4RequestArchive{}
	return &this
}

// GetS3 returns the S3 field value
func (o *DynamicArchiveMP4RequestArchive) GetS3() ArchiveFERRequestPackagesInnerArchiveS3 {
	if o == nil {
		var ret ArchiveFERRequestPackagesInnerArchiveS3
		return ret
	}

	return o.S3
}

// GetS3Ok returns a tuple with the S3 field value
// and a boolean to check if the value has been set.
func (o *DynamicArchiveMP4RequestArchive) GetS3Ok() (*ArchiveFERRequestPackagesInnerArchiveS3, bool) {
	if o == nil {
		return nil, false
	}
	return &o.S3, true
}

// SetS3 sets field value
func (o *DynamicArchiveMP4RequestArchive) SetS3(v ArchiveFERRequestPackagesInnerArchiveS3) {
	o.S3 = v
}

func (o DynamicArchiveMP4RequestArchive) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DynamicArchiveMP4RequestArchive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["s3"] = o.S3
	return toSerialize, nil
}

type NullableDynamicArchiveMP4RequestArchive struct {
	value *DynamicArchiveMP4RequestArchive
	isSet bool
}

func (v NullableDynamicArchiveMP4RequestArchive) Get() *DynamicArchiveMP4RequestArchive {
	return v.value
}

func (v *NullableDynamicArchiveMP4RequestArchive) Set(val *DynamicArchiveMP4RequestArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicArchiveMP4RequestArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicArchiveMP4RequestArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicArchiveMP4RequestArchive(val *DynamicArchiveMP4RequestArchive) *NullableDynamicArchiveMP4RequestArchive {
	return &NullableDynamicArchiveMP4RequestArchive{value: val, isSet: true}
}

func (v NullableDynamicArchiveMP4RequestArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicArchiveMP4RequestArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


