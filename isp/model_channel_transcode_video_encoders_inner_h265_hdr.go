/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 * Contact: support@istreamplanet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// ChannelTranscodeVideoEncodersInnerH265Hdr Configure the HDR settings.
type ChannelTranscodeVideoEncodersInnerH265Hdr struct {
	DolbyVision *ChannelTranscodeVideoEncodersInnerH265HdrDolbyVision `json:"dolby_vision,omitempty"`
	Hdr10 *ChannelTranscodeVideoEncodersInnerH265HdrHdr10 `json:"hdr10,omitempty"`
	// Only one of ['hlg', 'hdr10', 'dolby_vision'] may be set.
	Hlg map[string]interface{} `json:"hlg,omitempty"`
}

// NewChannelTranscodeVideoEncodersInnerH265Hdr instantiates a new ChannelTranscodeVideoEncodersInnerH265Hdr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelTranscodeVideoEncodersInnerH265Hdr() *ChannelTranscodeVideoEncodersInnerH265Hdr {
	this := ChannelTranscodeVideoEncodersInnerH265Hdr{}
	return &this
}

// NewChannelTranscodeVideoEncodersInnerH265HdrWithDefaults instantiates a new ChannelTranscodeVideoEncodersInnerH265Hdr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelTranscodeVideoEncodersInnerH265HdrWithDefaults() *ChannelTranscodeVideoEncodersInnerH265Hdr {
	this := ChannelTranscodeVideoEncodersInnerH265Hdr{}
	return &this
}

// GetDolbyVision returns the DolbyVision field value if set, zero value otherwise.
func (o *ChannelTranscodeVideoEncodersInnerH265Hdr) GetDolbyVision() ChannelTranscodeVideoEncodersInnerH265HdrDolbyVision {
	if o == nil || o.DolbyVision == nil {
		var ret ChannelTranscodeVideoEncodersInnerH265HdrDolbyVision
		return ret
	}
	return *o.DolbyVision
}

// GetDolbyVisionOk returns a tuple with the DolbyVision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265Hdr) GetDolbyVisionOk() (*ChannelTranscodeVideoEncodersInnerH265HdrDolbyVision, bool) {
	if o == nil || o.DolbyVision == nil {
		return nil, false
	}
	return o.DolbyVision, true
}

// HasDolbyVision returns a boolean if a field has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265Hdr) HasDolbyVision() bool {
	if o != nil && o.DolbyVision != nil {
		return true
	}

	return false
}

// SetDolbyVision gets a reference to the given ChannelTranscodeVideoEncodersInnerH265HdrDolbyVision and assigns it to the DolbyVision field.
func (o *ChannelTranscodeVideoEncodersInnerH265Hdr) SetDolbyVision(v ChannelTranscodeVideoEncodersInnerH265HdrDolbyVision) {
	o.DolbyVision = &v
}

// GetHdr10 returns the Hdr10 field value if set, zero value otherwise.
func (o *ChannelTranscodeVideoEncodersInnerH265Hdr) GetHdr10() ChannelTranscodeVideoEncodersInnerH265HdrHdr10 {
	if o == nil || o.Hdr10 == nil {
		var ret ChannelTranscodeVideoEncodersInnerH265HdrHdr10
		return ret
	}
	return *o.Hdr10
}

// GetHdr10Ok returns a tuple with the Hdr10 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265Hdr) GetHdr10Ok() (*ChannelTranscodeVideoEncodersInnerH265HdrHdr10, bool) {
	if o == nil || o.Hdr10 == nil {
		return nil, false
	}
	return o.Hdr10, true
}

// HasHdr10 returns a boolean if a field has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265Hdr) HasHdr10() bool {
	if o != nil && o.Hdr10 != nil {
		return true
	}

	return false
}

// SetHdr10 gets a reference to the given ChannelTranscodeVideoEncodersInnerH265HdrHdr10 and assigns it to the Hdr10 field.
func (o *ChannelTranscodeVideoEncodersInnerH265Hdr) SetHdr10(v ChannelTranscodeVideoEncodersInnerH265HdrHdr10) {
	o.Hdr10 = &v
}

// GetHlg returns the Hlg field value if set, zero value otherwise.
func (o *ChannelTranscodeVideoEncodersInnerH265Hdr) GetHlg() map[string]interface{} {
	if o == nil || o.Hlg == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Hlg
}

// GetHlgOk returns a tuple with the Hlg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265Hdr) GetHlgOk() (map[string]interface{}, bool) {
	if o == nil || o.Hlg == nil {
		return nil, false
	}
	return o.Hlg, true
}

// HasHlg returns a boolean if a field has been set.
func (o *ChannelTranscodeVideoEncodersInnerH265Hdr) HasHlg() bool {
	if o != nil && o.Hlg != nil {
		return true
	}

	return false
}

// SetHlg gets a reference to the given map[string]interface{} and assigns it to the Hlg field.
func (o *ChannelTranscodeVideoEncodersInnerH265Hdr) SetHlg(v map[string]interface{}) {
	o.Hlg = v
}

func (o ChannelTranscodeVideoEncodersInnerH265Hdr) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DolbyVision != nil {
		toSerialize["dolby_vision"] = o.DolbyVision
	}
	if o.Hdr10 != nil {
		toSerialize["hdr10"] = o.Hdr10
	}
	if o.Hlg != nil {
		toSerialize["hlg"] = o.Hlg
	}
	return json.Marshal(toSerialize)
}

type NullableChannelTranscodeVideoEncodersInnerH265Hdr struct {
	value *ChannelTranscodeVideoEncodersInnerH265Hdr
	isSet bool
}

func (v NullableChannelTranscodeVideoEncodersInnerH265Hdr) Get() *ChannelTranscodeVideoEncodersInnerH265Hdr {
	return v.value
}

func (v *NullableChannelTranscodeVideoEncodersInnerH265Hdr) Set(val *ChannelTranscodeVideoEncodersInnerH265Hdr) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelTranscodeVideoEncodersInnerH265Hdr) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelTranscodeVideoEncodersInnerH265Hdr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelTranscodeVideoEncodersInnerH265Hdr(val *ChannelTranscodeVideoEncodersInnerH265Hdr) *NullableChannelTranscodeVideoEncodersInnerH265Hdr {
	return &NullableChannelTranscodeVideoEncodersInnerH265Hdr{value: val, isSet: true}
}

func (v NullableChannelTranscodeVideoEncodersInnerH265Hdr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelTranscodeVideoEncodersInnerH265Hdr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


