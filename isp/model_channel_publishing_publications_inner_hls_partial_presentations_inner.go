/*
 * WBD Aventus Channels API
 *
 * API version: 0.0.0
 * Contact: live-control-plane-devs@wbd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// checks if the ChannelPublishingPublicationsInnerHlsPartialPresentationsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelPublishingPublicationsInnerHlsPartialPresentationsInner{}

// ChannelPublishingPublicationsInnerHlsPartialPresentationsInner struct for ChannelPublishingPublicationsInnerHlsPartialPresentationsInner
type ChannelPublishingPublicationsInnerHlsPartialPresentationsInner struct {
	// Specify which audio encoders should be used for this presentation. If none are specified, all audio encoders configured for the parent Publication will be used.
	AudioEncoderIds []string `json:"audio_encoder_ids,omitempty" uniqueItems:"true" doc:"Specify which audio encoders should be used for this presentation. If none are specified, all audio encoders configured for the parent Publication will be used."`
	// Optionally specify which audio encoders should be used when generating the FER of this Partial Presentation, this overrides the 'audio_encoder_ids' used during the live portion. If none are specified, the 'audio_encoder_ids' field will be used. NOTE: This MUST only be used with push based manifest. Ignore this field when using Aventus Origin with Dynamic Manifests. Instead use the AudioSource.License field.
	FerAudioEncoderIds []string `json:"fer_audio_encoder_ids,omitempty" uniqueItems:"true" doc:"Optionally specify which audio encoders should be used when generating the FER of this Partial Presentation, this overrides the 'audio_encoder_ids' used during the live portion. If none are specified, the 'audio_encoder_ids' field will be used. NOTE: This MUST only be used with push based manifest. Ignore this field when using Aventus Origin with Dynamic Manifests. Instead use the AudioSource.License field."`
	// List of video encoder IDs that should have I-Frame only playlists generated for them. If no 'iframe_only_encoder_ids' are given then no I-Frame playlists will be in the Partial Presentation.
	IframeOnlyEncoderIds []string `json:"iframe_only_encoder_ids,omitempty" uniqueItems:"true" doc:"List of video encoder IDs that should have I-Frame only playlists generated for them. If no 'iframe_only_encoder_ids' are given then no I-Frame playlists will be in the Partial Presentation."`
	// Sub-path that will be appended onto the publish and playback base URLs of HTTP PublishPoints for published playlist files.
	PlaylistPath *string `json:"playlist_path,omitempty" minLength:"1" doc:"Sub-path that will be appended onto the publish and playback base URLs of HTTP PublishPoints for published playlist files."`
	// Specify which thumbnail encoders should be used for this presentation. If no 'thumbnail_encoder_ids' are given then no thumbnail playlists will be in the Partial Presentation.
	ThumbnailEncoderIds []string `json:"thumbnail_encoder_ids,omitempty" uniqueItems:"true" doc:"Specify which thumbnail encoders should be used for this presentation. If no 'thumbnail_encoder_ids' are given then no thumbnail playlists will be in the Partial Presentation."`
	// Specify which video encoders should be used for this presentation. If none are specified, all video encoders configured for the parent Publication will be used.
	VideoEncoderIds []string `json:"video_encoder_ids,omitempty" uniqueItems:"true" doc:"Specify which video encoders should be used for this presentation. If none are specified, all video encoders configured for the parent Publication will be used."`
}

// NewChannelPublishingPublicationsInnerHlsPartialPresentationsInner instantiates a new ChannelPublishingPublicationsInnerHlsPartialPresentationsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelPublishingPublicationsInnerHlsPartialPresentationsInner() *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner {
	this := ChannelPublishingPublicationsInnerHlsPartialPresentationsInner{}
	return &this
}

// NewChannelPublishingPublicationsInnerHlsPartialPresentationsInnerWithDefaults instantiates a new ChannelPublishingPublicationsInnerHlsPartialPresentationsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelPublishingPublicationsInnerHlsPartialPresentationsInnerWithDefaults() *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner {
	this := ChannelPublishingPublicationsInnerHlsPartialPresentationsInner{}
	return &this
}

// GetAudioEncoderIds returns the AudioEncoderIds field value if set, zero value otherwise.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) GetAudioEncoderIds() []string {
	if o == nil || IsNil(o.AudioEncoderIds) {
		var ret []string
		return ret
	}
	return o.AudioEncoderIds
}

// GetAudioEncoderIdsOk returns a tuple with the AudioEncoderIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) GetAudioEncoderIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AudioEncoderIds) {
		return nil, false
	}
	return o.AudioEncoderIds, true
}

// HasAudioEncoderIds returns a boolean if a field has been set.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) HasAudioEncoderIds() bool {
	if o != nil && !IsNil(o.AudioEncoderIds) {
		return true
	}

	return false
}

// SetAudioEncoderIds gets a reference to the given []string and assigns it to the AudioEncoderIds field.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) SetAudioEncoderIds(v []string) {
	o.AudioEncoderIds = v
}

// GetFerAudioEncoderIds returns the FerAudioEncoderIds field value if set, zero value otherwise.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) GetFerAudioEncoderIds() []string {
	if o == nil || IsNil(o.FerAudioEncoderIds) {
		var ret []string
		return ret
	}
	return o.FerAudioEncoderIds
}

// GetFerAudioEncoderIdsOk returns a tuple with the FerAudioEncoderIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) GetFerAudioEncoderIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FerAudioEncoderIds) {
		return nil, false
	}
	return o.FerAudioEncoderIds, true
}

// HasFerAudioEncoderIds returns a boolean if a field has been set.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) HasFerAudioEncoderIds() bool {
	if o != nil && !IsNil(o.FerAudioEncoderIds) {
		return true
	}

	return false
}

// SetFerAudioEncoderIds gets a reference to the given []string and assigns it to the FerAudioEncoderIds field.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) SetFerAudioEncoderIds(v []string) {
	o.FerAudioEncoderIds = v
}

// GetIframeOnlyEncoderIds returns the IframeOnlyEncoderIds field value if set, zero value otherwise.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) GetIframeOnlyEncoderIds() []string {
	if o == nil || IsNil(o.IframeOnlyEncoderIds) {
		var ret []string
		return ret
	}
	return o.IframeOnlyEncoderIds
}

// GetIframeOnlyEncoderIdsOk returns a tuple with the IframeOnlyEncoderIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) GetIframeOnlyEncoderIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.IframeOnlyEncoderIds) {
		return nil, false
	}
	return o.IframeOnlyEncoderIds, true
}

// HasIframeOnlyEncoderIds returns a boolean if a field has been set.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) HasIframeOnlyEncoderIds() bool {
	if o != nil && !IsNil(o.IframeOnlyEncoderIds) {
		return true
	}

	return false
}

// SetIframeOnlyEncoderIds gets a reference to the given []string and assigns it to the IframeOnlyEncoderIds field.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) SetIframeOnlyEncoderIds(v []string) {
	o.IframeOnlyEncoderIds = v
}

// GetPlaylistPath returns the PlaylistPath field value if set, zero value otherwise.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) GetPlaylistPath() string {
	if o == nil || IsNil(o.PlaylistPath) {
		var ret string
		return ret
	}
	return *o.PlaylistPath
}

// GetPlaylistPathOk returns a tuple with the PlaylistPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) GetPlaylistPathOk() (*string, bool) {
	if o == nil || IsNil(o.PlaylistPath) {
		return nil, false
	}
	return o.PlaylistPath, true
}

// HasPlaylistPath returns a boolean if a field has been set.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) HasPlaylistPath() bool {
	if o != nil && !IsNil(o.PlaylistPath) {
		return true
	}

	return false
}

// SetPlaylistPath gets a reference to the given string and assigns it to the PlaylistPath field.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) SetPlaylistPath(v string) {
	o.PlaylistPath = &v
}

// GetThumbnailEncoderIds returns the ThumbnailEncoderIds field value if set, zero value otherwise.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) GetThumbnailEncoderIds() []string {
	if o == nil || IsNil(o.ThumbnailEncoderIds) {
		var ret []string
		return ret
	}
	return o.ThumbnailEncoderIds
}

// GetThumbnailEncoderIdsOk returns a tuple with the ThumbnailEncoderIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) GetThumbnailEncoderIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ThumbnailEncoderIds) {
		return nil, false
	}
	return o.ThumbnailEncoderIds, true
}

// HasThumbnailEncoderIds returns a boolean if a field has been set.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) HasThumbnailEncoderIds() bool {
	if o != nil && !IsNil(o.ThumbnailEncoderIds) {
		return true
	}

	return false
}

// SetThumbnailEncoderIds gets a reference to the given []string and assigns it to the ThumbnailEncoderIds field.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) SetThumbnailEncoderIds(v []string) {
	o.ThumbnailEncoderIds = v
}

// GetVideoEncoderIds returns the VideoEncoderIds field value if set, zero value otherwise.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) GetVideoEncoderIds() []string {
	if o == nil || IsNil(o.VideoEncoderIds) {
		var ret []string
		return ret
	}
	return o.VideoEncoderIds
}

// GetVideoEncoderIdsOk returns a tuple with the VideoEncoderIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) GetVideoEncoderIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.VideoEncoderIds) {
		return nil, false
	}
	return o.VideoEncoderIds, true
}

// HasVideoEncoderIds returns a boolean if a field has been set.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) HasVideoEncoderIds() bool {
	if o != nil && !IsNil(o.VideoEncoderIds) {
		return true
	}

	return false
}

// SetVideoEncoderIds gets a reference to the given []string and assigns it to the VideoEncoderIds field.
func (o *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) SetVideoEncoderIds(v []string) {
	o.VideoEncoderIds = v
}

func (o ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AudioEncoderIds) {
		toSerialize["audio_encoder_ids"] = o.AudioEncoderIds
	}
	if !IsNil(o.FerAudioEncoderIds) {
		toSerialize["fer_audio_encoder_ids"] = o.FerAudioEncoderIds
	}
	if !IsNil(o.IframeOnlyEncoderIds) {
		toSerialize["iframe_only_encoder_ids"] = o.IframeOnlyEncoderIds
	}
	if !IsNil(o.PlaylistPath) {
		toSerialize["playlist_path"] = o.PlaylistPath
	}
	if !IsNil(o.ThumbnailEncoderIds) {
		toSerialize["thumbnail_encoder_ids"] = o.ThumbnailEncoderIds
	}
	if !IsNil(o.VideoEncoderIds) {
		toSerialize["video_encoder_ids"] = o.VideoEncoderIds
	}
	return toSerialize, nil
}

type NullableChannelPublishingPublicationsInnerHlsPartialPresentationsInner struct {
	value *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner
	isSet bool
}

func (v NullableChannelPublishingPublicationsInnerHlsPartialPresentationsInner) Get() *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner {
	return v.value
}

func (v *NullableChannelPublishingPublicationsInnerHlsPartialPresentationsInner) Set(val *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelPublishingPublicationsInnerHlsPartialPresentationsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelPublishingPublicationsInnerHlsPartialPresentationsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelPublishingPublicationsInnerHlsPartialPresentationsInner(val *ChannelPublishingPublicationsInnerHlsPartialPresentationsInner) *NullableChannelPublishingPublicationsInnerHlsPartialPresentationsInner {
	return &NullableChannelPublishingPublicationsInnerHlsPartialPresentationsInner{value: val, isSet: true}
}

func (v NullableChannelPublishingPublicationsInnerHlsPartialPresentationsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelPublishingPublicationsInnerHlsPartialPresentationsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


