/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 * Contact: support@istreamplanet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// ChannelPlayback struct for ChannelPlayback
type ChannelPlayback struct {
	// CMAF playback configurations
	Cmaf *[]ChannelPlaybackCmaf `json:"cmaf,omitempty"`
	// Dash playback configurations
	Dash *[]ChannelPlaybackCmaf `json:"dash,omitempty"`
	// HLS playback configurations
	Hls *[]ChannelPlaybackCmaf `json:"hls,omitempty"`
}

// NewChannelPlayback instantiates a new ChannelPlayback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelPlayback() *ChannelPlayback {
	this := ChannelPlayback{}
	return &this
}

// NewChannelPlaybackWithDefaults instantiates a new ChannelPlayback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelPlaybackWithDefaults() *ChannelPlayback {
	this := ChannelPlayback{}
	return &this
}

// GetCmaf returns the Cmaf field value if set, zero value otherwise.
func (o *ChannelPlayback) GetCmaf() []ChannelPlaybackCmaf {
	if o == nil || o.Cmaf == nil {
		var ret []ChannelPlaybackCmaf
		return ret
	}
	return *o.Cmaf
}

// GetCmafOk returns a tuple with the Cmaf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPlayback) GetCmafOk() (*[]ChannelPlaybackCmaf, bool) {
	if o == nil || o.Cmaf == nil {
		return nil, false
	}
	return o.Cmaf, true
}

// HasCmaf returns a boolean if a field has been set.
func (o *ChannelPlayback) HasCmaf() bool {
	if o != nil && o.Cmaf != nil {
		return true
	}

	return false
}

// SetCmaf gets a reference to the given []ChannelPlaybackCmaf and assigns it to the Cmaf field.
func (o *ChannelPlayback) SetCmaf(v []ChannelPlaybackCmaf) {
	o.Cmaf = &v
}

// GetDash returns the Dash field value if set, zero value otherwise.
func (o *ChannelPlayback) GetDash() []ChannelPlaybackCmaf {
	if o == nil || o.Dash == nil {
		var ret []ChannelPlaybackCmaf
		return ret
	}
	return *o.Dash
}

// GetDashOk returns a tuple with the Dash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPlayback) GetDashOk() (*[]ChannelPlaybackCmaf, bool) {
	if o == nil || o.Dash == nil {
		return nil, false
	}
	return o.Dash, true
}

// HasDash returns a boolean if a field has been set.
func (o *ChannelPlayback) HasDash() bool {
	if o != nil && o.Dash != nil {
		return true
	}

	return false
}

// SetDash gets a reference to the given []ChannelPlaybackCmaf and assigns it to the Dash field.
func (o *ChannelPlayback) SetDash(v []ChannelPlaybackCmaf) {
	o.Dash = &v
}

// GetHls returns the Hls field value if set, zero value otherwise.
func (o *ChannelPlayback) GetHls() []ChannelPlaybackCmaf {
	if o == nil || o.Hls == nil {
		var ret []ChannelPlaybackCmaf
		return ret
	}
	return *o.Hls
}

// GetHlsOk returns a tuple with the Hls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPlayback) GetHlsOk() (*[]ChannelPlaybackCmaf, bool) {
	if o == nil || o.Hls == nil {
		return nil, false
	}
	return o.Hls, true
}

// HasHls returns a boolean if a field has been set.
func (o *ChannelPlayback) HasHls() bool {
	if o != nil && o.Hls != nil {
		return true
	}

	return false
}

// SetHls gets a reference to the given []ChannelPlaybackCmaf and assigns it to the Hls field.
func (o *ChannelPlayback) SetHls(v []ChannelPlaybackCmaf) {
	o.Hls = &v
}

func (o ChannelPlayback) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cmaf != nil {
		toSerialize["cmaf"] = o.Cmaf
	}
	if o.Dash != nil {
		toSerialize["dash"] = o.Dash
	}
	if o.Hls != nil {
		toSerialize["hls"] = o.Hls
	}
	return json.Marshal(toSerialize)
}

type NullableChannelPlayback struct {
	value *ChannelPlayback
	isSet bool
}

func (v NullableChannelPlayback) Get() *ChannelPlayback {
	return v.value
}

func (v *NullableChannelPlayback) Set(val *ChannelPlayback) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelPlayback) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelPlayback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelPlayback(val *ChannelPlayback) *NullableChannelPlayback {
	return &NullableChannelPlayback{value: val, isSet: true}
}

func (v NullableChannelPlayback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelPlayback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


