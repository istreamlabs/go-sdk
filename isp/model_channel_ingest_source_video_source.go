/*
 * WBD Aventus Channels API
 *
 * API version: v1.19.25
 * Contact: live-control-plane-devs@wbd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// checks if the ChannelIngestSourceVideoSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelIngestSourceVideoSource{}

// ChannelIngestSourceVideoSource Additional information about the source video stream. This is only used to configure the transcoder compute resources to account for scaling and colorspace conversion of the source input.
type ChannelIngestSourceVideoSource struct {
	// The highest dynamic range the source will ever send to the transcoder.
	DynamicRange *string `json:"dynamic_range,omitempty" enum:"SDR,HDR" doc:"The highest dynamic range the source will ever send to the transcoder."`
	// The maximum resolution the source will ever send to the transcoder.
	MaxResolution *string `json:"max_resolution,omitempty" enum:"SD,HD,FHD,TwoK,QHD,UHD" doc:"The maximum resolution the source will ever send to the transcoder."`
}

// NewChannelIngestSourceVideoSource instantiates a new ChannelIngestSourceVideoSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelIngestSourceVideoSource() *ChannelIngestSourceVideoSource {
	this := ChannelIngestSourceVideoSource{}
	return &this
}

// NewChannelIngestSourceVideoSourceWithDefaults instantiates a new ChannelIngestSourceVideoSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelIngestSourceVideoSourceWithDefaults() *ChannelIngestSourceVideoSource {
	this := ChannelIngestSourceVideoSource{}
	return &this
}

// GetDynamicRange returns the DynamicRange field value if set, zero value otherwise.
func (o *ChannelIngestSourceVideoSource) GetDynamicRange() string {
	if o == nil || IsNil(o.DynamicRange) {
		var ret string
		return ret
	}
	return *o.DynamicRange
}

// GetDynamicRangeOk returns a tuple with the DynamicRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelIngestSourceVideoSource) GetDynamicRangeOk() (*string, bool) {
	if o == nil || IsNil(o.DynamicRange) {
		return nil, false
	}
	return o.DynamicRange, true
}

// HasDynamicRange returns a boolean if a field has been set.
func (o *ChannelIngestSourceVideoSource) HasDynamicRange() bool {
	if o != nil && !IsNil(o.DynamicRange) {
		return true
	}

	return false
}

// SetDynamicRange gets a reference to the given string and assigns it to the DynamicRange field.
func (o *ChannelIngestSourceVideoSource) SetDynamicRange(v string) {
	o.DynamicRange = &v
}

// GetMaxResolution returns the MaxResolution field value if set, zero value otherwise.
func (o *ChannelIngestSourceVideoSource) GetMaxResolution() string {
	if o == nil || IsNil(o.MaxResolution) {
		var ret string
		return ret
	}
	return *o.MaxResolution
}

// GetMaxResolutionOk returns a tuple with the MaxResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelIngestSourceVideoSource) GetMaxResolutionOk() (*string, bool) {
	if o == nil || IsNil(o.MaxResolution) {
		return nil, false
	}
	return o.MaxResolution, true
}

// HasMaxResolution returns a boolean if a field has been set.
func (o *ChannelIngestSourceVideoSource) HasMaxResolution() bool {
	if o != nil && !IsNil(o.MaxResolution) {
		return true
	}

	return false
}

// SetMaxResolution gets a reference to the given string and assigns it to the MaxResolution field.
func (o *ChannelIngestSourceVideoSource) SetMaxResolution(v string) {
	o.MaxResolution = &v
}

func (o ChannelIngestSourceVideoSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelIngestSourceVideoSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DynamicRange) {
		toSerialize["dynamic_range"] = o.DynamicRange
	}
	if !IsNil(o.MaxResolution) {
		toSerialize["max_resolution"] = o.MaxResolution
	}
	return toSerialize, nil
}

type NullableChannelIngestSourceVideoSource struct {
	value *ChannelIngestSourceVideoSource
	isSet bool
}

func (v NullableChannelIngestSourceVideoSource) Get() *ChannelIngestSourceVideoSource {
	return v.value
}

func (v *NullableChannelIngestSourceVideoSource) Set(val *ChannelIngestSourceVideoSource) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelIngestSourceVideoSource) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelIngestSourceVideoSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelIngestSourceVideoSource(val *ChannelIngestSourceVideoSource) *NullableChannelIngestSourceVideoSource {
	return &NullableChannelIngestSourceVideoSource{value: val, isSet: true}
}

func (v NullableChannelIngestSourceVideoSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelIngestSourceVideoSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


