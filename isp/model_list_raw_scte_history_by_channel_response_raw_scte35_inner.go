/*
 * WBD Aventus Channels API
 *
 * API version: 0.0.0
 * Contact: live-control-plane-devs@wbd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
	"time"
)

// checks if the ListRawSCTEHistoryByChannelResponseRawScte35Inner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListRawSCTEHistoryByChannelResponseRawScte35Inner{}

// ListRawSCTEHistoryByChannelResponseRawScte35Inner struct for ListRawSCTEHistoryByChannelResponseRawScte35Inner
type ListRawSCTEHistoryByChannelResponseRawScte35Inner struct {
	Header *ListRawSCTEHistoryByChannelResponseRawScte35InnerHeader `json:"header,omitempty"`
	// id is a unique scte id assigned by the transcoder per run_id
	Id *int32 `json:"id,omitempty" format:"int32" minimum:"0" doc:"id is a unique scte id assigned by the transcoder per run_id"`
	// in_band denotes whether the SCTE-35 message was received in the source consumed by the transcoder (In-Band) or signaled via Transcoder API (Out-of-Band).
	InBand *bool `json:"in_band,omitempty" doc:"in_band denotes whether the SCTE-35 message was received in the source consumed by the transcoder (In-Band) or signaled via Transcoder API (Out-of-Band)."`
	Scte35 *string `json:"scte35,omitempty"`
	Source *string `json:"source,omitempty" enum:"SOURCE_UNDEFINED,PRIMARY,SECONDARY"`
	// time is the time at which the SCTE was received by the transcoder.
	Time *time.Time `json:"time,omitempty" format:"date-time" doc:"time is the time at which the SCTE was received by the transcoder."`
}

// NewListRawSCTEHistoryByChannelResponseRawScte35Inner instantiates a new ListRawSCTEHistoryByChannelResponseRawScte35Inner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListRawSCTEHistoryByChannelResponseRawScte35Inner() *ListRawSCTEHistoryByChannelResponseRawScte35Inner {
	this := ListRawSCTEHistoryByChannelResponseRawScte35Inner{}
	return &this
}

// NewListRawSCTEHistoryByChannelResponseRawScte35InnerWithDefaults instantiates a new ListRawSCTEHistoryByChannelResponseRawScte35Inner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListRawSCTEHistoryByChannelResponseRawScte35InnerWithDefaults() *ListRawSCTEHistoryByChannelResponseRawScte35Inner {
	this := ListRawSCTEHistoryByChannelResponseRawScte35Inner{}
	return &this
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) GetHeader() ListRawSCTEHistoryByChannelResponseRawScte35InnerHeader {
	if o == nil || IsNil(o.Header) {
		var ret ListRawSCTEHistoryByChannelResponseRawScte35InnerHeader
		return ret
	}
	return *o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) GetHeaderOk() (*ListRawSCTEHistoryByChannelResponseRawScte35InnerHeader, bool) {
	if o == nil || IsNil(o.Header) {
		return nil, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) HasHeader() bool {
	if o != nil && !IsNil(o.Header) {
		return true
	}

	return false
}

// SetHeader gets a reference to the given ListRawSCTEHistoryByChannelResponseRawScte35InnerHeader and assigns it to the Header field.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) SetHeader(v ListRawSCTEHistoryByChannelResponseRawScte35InnerHeader) {
	o.Header = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) SetId(v int32) {
	o.Id = &v
}

// GetInBand returns the InBand field value if set, zero value otherwise.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) GetInBand() bool {
	if o == nil || IsNil(o.InBand) {
		var ret bool
		return ret
	}
	return *o.InBand
}

// GetInBandOk returns a tuple with the InBand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) GetInBandOk() (*bool, bool) {
	if o == nil || IsNil(o.InBand) {
		return nil, false
	}
	return o.InBand, true
}

// HasInBand returns a boolean if a field has been set.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) HasInBand() bool {
	if o != nil && !IsNil(o.InBand) {
		return true
	}

	return false
}

// SetInBand gets a reference to the given bool and assigns it to the InBand field.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) SetInBand(v bool) {
	o.InBand = &v
}

// GetScte35 returns the Scte35 field value if set, zero value otherwise.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) GetScte35() string {
	if o == nil || IsNil(o.Scte35) {
		var ret string
		return ret
	}
	return *o.Scte35
}

// GetScte35Ok returns a tuple with the Scte35 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) GetScte35Ok() (*string, bool) {
	if o == nil || IsNil(o.Scte35) {
		return nil, false
	}
	return o.Scte35, true
}

// HasScte35 returns a boolean if a field has been set.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) HasScte35() bool {
	if o != nil && !IsNil(o.Scte35) {
		return true
	}

	return false
}

// SetScte35 gets a reference to the given string and assigns it to the Scte35 field.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) SetScte35(v string) {
	o.Scte35 = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) SetSource(v string) {
	o.Source = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) GetTime() time.Time {
	if o == nil || IsNil(o.Time) {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) GetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *ListRawSCTEHistoryByChannelResponseRawScte35Inner) SetTime(v time.Time) {
	o.Time = &v
}

func (o ListRawSCTEHistoryByChannelResponseRawScte35Inner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListRawSCTEHistoryByChannelResponseRawScte35Inner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Header) {
		toSerialize["header"] = o.Header
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InBand) {
		toSerialize["in_band"] = o.InBand
	}
	if !IsNil(o.Scte35) {
		toSerialize["scte35"] = o.Scte35
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	return toSerialize, nil
}

type NullableListRawSCTEHistoryByChannelResponseRawScte35Inner struct {
	value *ListRawSCTEHistoryByChannelResponseRawScte35Inner
	isSet bool
}

func (v NullableListRawSCTEHistoryByChannelResponseRawScte35Inner) Get() *ListRawSCTEHistoryByChannelResponseRawScte35Inner {
	return v.value
}

func (v *NullableListRawSCTEHistoryByChannelResponseRawScte35Inner) Set(val *ListRawSCTEHistoryByChannelResponseRawScte35Inner) {
	v.value = val
	v.isSet = true
}

func (v NullableListRawSCTEHistoryByChannelResponseRawScte35Inner) IsSet() bool {
	return v.isSet
}

func (v *NullableListRawSCTEHistoryByChannelResponseRawScte35Inner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRawSCTEHistoryByChannelResponseRawScte35Inner(val *ListRawSCTEHistoryByChannelResponseRawScte35Inner) *NullableListRawSCTEHistoryByChannelResponseRawScte35Inner {
	return &NullableListRawSCTEHistoryByChannelResponseRawScte35Inner{value: val, isSet: true}
}

func (v NullableListRawSCTEHistoryByChannelResponseRawScte35Inner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRawSCTEHistoryByChannelResponseRawScte35Inner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


