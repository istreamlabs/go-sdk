/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 * Contact: support@istreamplanet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// ChannelTranscodeAudioEncodersInner struct for ChannelTranscodeAudioEncodersInner
type ChannelTranscodeAudioEncodersInner struct {
	// Audio source ID specifies which stream within the audio source to use.
	AudioSourceId *string `json:"audio_source_id,omitempty"`
	// Bit rate specifies the constant number of bits used per second. Higher values result in better audio quality but bigger file sizes.
	BitRate *int32 `json:"bit_rate,omitempty"`
	// Channels specifies the number of audio channels to encode. The available options depend on the audio codec. The encoder supports different channel configurations based on the codec; AAC 1-2 channels, AC3 supports 1-6, and EAC3 supports 1-8. For example, for AC3 5.1 one would set 6 channels. Channel configurations are as follows: 1 - Mono / Dolby 1.0 (C), 2 - Stereo / Dolby 2.0 (L, R), 3 - Dolby 3.0 (L, C, R), 4 - Dolby 4.0 (L, C, R, l), 5 - Dolby 5.0 (L, C, R, l, r), 6 - Dolby 5.1 (L, C, R, l, r, LFE), 7 - Dolby 7.0 (L, C, R, l, r, Lrs, Rrs), 8 - Dolby 7.1 (L, C, R, l, r, Lrs, Rrs, LFE).
	Channels *int32 `json:"channels,omitempty"`
	// Codec specifies the audio data encoding format.
	Codec *string `json:"codec,omitempty"`
	// Encoder ID. IDs must be unique for all audio encoders. This ID is referenced when setting up playlist publishing.
	Id *string `json:"id,omitempty"`
	Loudness *ChannelTranscodeAudioEncodersInnerLoudness `json:"loudness,omitempty"`
	// Sample rate specifies the number of audio samples in hertz. The available options depend on the audio codec: AAC supports 8000, 11025, 12000, 16000, 22050, 24000, 32000, 44100, 48000, 64000, 88200, and 96000. AC3/EAC3 support only 48000.
	SampleRate *int32 `json:"sample_rate,omitempty"`
}

// NewChannelTranscodeAudioEncodersInner instantiates a new ChannelTranscodeAudioEncodersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelTranscodeAudioEncodersInner() *ChannelTranscodeAudioEncodersInner {
	this := ChannelTranscodeAudioEncodersInner{}
	return &this
}

// NewChannelTranscodeAudioEncodersInnerWithDefaults instantiates a new ChannelTranscodeAudioEncodersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelTranscodeAudioEncodersInnerWithDefaults() *ChannelTranscodeAudioEncodersInner {
	this := ChannelTranscodeAudioEncodersInner{}
	return &this
}

// GetAudioSourceId returns the AudioSourceId field value if set, zero value otherwise.
func (o *ChannelTranscodeAudioEncodersInner) GetAudioSourceId() string {
	if o == nil || o.AudioSourceId == nil {
		var ret string
		return ret
	}
	return *o.AudioSourceId
}

// GetAudioSourceIdOk returns a tuple with the AudioSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeAudioEncodersInner) GetAudioSourceIdOk() (*string, bool) {
	if o == nil || o.AudioSourceId == nil {
		return nil, false
	}
	return o.AudioSourceId, true
}

// HasAudioSourceId returns a boolean if a field has been set.
func (o *ChannelTranscodeAudioEncodersInner) HasAudioSourceId() bool {
	if o != nil && o.AudioSourceId != nil {
		return true
	}

	return false
}

// SetAudioSourceId gets a reference to the given string and assigns it to the AudioSourceId field.
func (o *ChannelTranscodeAudioEncodersInner) SetAudioSourceId(v string) {
	o.AudioSourceId = &v
}

// GetBitRate returns the BitRate field value if set, zero value otherwise.
func (o *ChannelTranscodeAudioEncodersInner) GetBitRate() int32 {
	if o == nil || o.BitRate == nil {
		var ret int32
		return ret
	}
	return *o.BitRate
}

// GetBitRateOk returns a tuple with the BitRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeAudioEncodersInner) GetBitRateOk() (*int32, bool) {
	if o == nil || o.BitRate == nil {
		return nil, false
	}
	return o.BitRate, true
}

// HasBitRate returns a boolean if a field has been set.
func (o *ChannelTranscodeAudioEncodersInner) HasBitRate() bool {
	if o != nil && o.BitRate != nil {
		return true
	}

	return false
}

// SetBitRate gets a reference to the given int32 and assigns it to the BitRate field.
func (o *ChannelTranscodeAudioEncodersInner) SetBitRate(v int32) {
	o.BitRate = &v
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *ChannelTranscodeAudioEncodersInner) GetChannels() int32 {
	if o == nil || o.Channels == nil {
		var ret int32
		return ret
	}
	return *o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeAudioEncodersInner) GetChannelsOk() (*int32, bool) {
	if o == nil || o.Channels == nil {
		return nil, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *ChannelTranscodeAudioEncodersInner) HasChannels() bool {
	if o != nil && o.Channels != nil {
		return true
	}

	return false
}

// SetChannels gets a reference to the given int32 and assigns it to the Channels field.
func (o *ChannelTranscodeAudioEncodersInner) SetChannels(v int32) {
	o.Channels = &v
}

// GetCodec returns the Codec field value if set, zero value otherwise.
func (o *ChannelTranscodeAudioEncodersInner) GetCodec() string {
	if o == nil || o.Codec == nil {
		var ret string
		return ret
	}
	return *o.Codec
}

// GetCodecOk returns a tuple with the Codec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeAudioEncodersInner) GetCodecOk() (*string, bool) {
	if o == nil || o.Codec == nil {
		return nil, false
	}
	return o.Codec, true
}

// HasCodec returns a boolean if a field has been set.
func (o *ChannelTranscodeAudioEncodersInner) HasCodec() bool {
	if o != nil && o.Codec != nil {
		return true
	}

	return false
}

// SetCodec gets a reference to the given string and assigns it to the Codec field.
func (o *ChannelTranscodeAudioEncodersInner) SetCodec(v string) {
	o.Codec = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChannelTranscodeAudioEncodersInner) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeAudioEncodersInner) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChannelTranscodeAudioEncodersInner) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ChannelTranscodeAudioEncodersInner) SetId(v string) {
	o.Id = &v
}

// GetLoudness returns the Loudness field value if set, zero value otherwise.
func (o *ChannelTranscodeAudioEncodersInner) GetLoudness() ChannelTranscodeAudioEncodersInnerLoudness {
	if o == nil || o.Loudness == nil {
		var ret ChannelTranscodeAudioEncodersInnerLoudness
		return ret
	}
	return *o.Loudness
}

// GetLoudnessOk returns a tuple with the Loudness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeAudioEncodersInner) GetLoudnessOk() (*ChannelTranscodeAudioEncodersInnerLoudness, bool) {
	if o == nil || o.Loudness == nil {
		return nil, false
	}
	return o.Loudness, true
}

// HasLoudness returns a boolean if a field has been set.
func (o *ChannelTranscodeAudioEncodersInner) HasLoudness() bool {
	if o != nil && o.Loudness != nil {
		return true
	}

	return false
}

// SetLoudness gets a reference to the given ChannelTranscodeAudioEncodersInnerLoudness and assigns it to the Loudness field.
func (o *ChannelTranscodeAudioEncodersInner) SetLoudness(v ChannelTranscodeAudioEncodersInnerLoudness) {
	o.Loudness = &v
}

// GetSampleRate returns the SampleRate field value if set, zero value otherwise.
func (o *ChannelTranscodeAudioEncodersInner) GetSampleRate() int32 {
	if o == nil || o.SampleRate == nil {
		var ret int32
		return ret
	}
	return *o.SampleRate
}

// GetSampleRateOk returns a tuple with the SampleRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelTranscodeAudioEncodersInner) GetSampleRateOk() (*int32, bool) {
	if o == nil || o.SampleRate == nil {
		return nil, false
	}
	return o.SampleRate, true
}

// HasSampleRate returns a boolean if a field has been set.
func (o *ChannelTranscodeAudioEncodersInner) HasSampleRate() bool {
	if o != nil && o.SampleRate != nil {
		return true
	}

	return false
}

// SetSampleRate gets a reference to the given int32 and assigns it to the SampleRate field.
func (o *ChannelTranscodeAudioEncodersInner) SetSampleRate(v int32) {
	o.SampleRate = &v
}

func (o ChannelTranscodeAudioEncodersInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AudioSourceId != nil {
		toSerialize["audio_source_id"] = o.AudioSourceId
	}
	if o.BitRate != nil {
		toSerialize["bit_rate"] = o.BitRate
	}
	if o.Channels != nil {
		toSerialize["channels"] = o.Channels
	}
	if o.Codec != nil {
		toSerialize["codec"] = o.Codec
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Loudness != nil {
		toSerialize["loudness"] = o.Loudness
	}
	if o.SampleRate != nil {
		toSerialize["sample_rate"] = o.SampleRate
	}
	return json.Marshal(toSerialize)
}

type NullableChannelTranscodeAudioEncodersInner struct {
	value *ChannelTranscodeAudioEncodersInner
	isSet bool
}

func (v NullableChannelTranscodeAudioEncodersInner) Get() *ChannelTranscodeAudioEncodersInner {
	return v.value
}

func (v *NullableChannelTranscodeAudioEncodersInner) Set(val *ChannelTranscodeAudioEncodersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelTranscodeAudioEncodersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelTranscodeAudioEncodersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelTranscodeAudioEncodersInner(val *ChannelTranscodeAudioEncodersInner) *NullableChannelTranscodeAudioEncodersInner {
	return &NullableChannelTranscodeAudioEncodersInner{value: val, isSet: true}
}

func (v NullableChannelTranscodeAudioEncodersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelTranscodeAudioEncodersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


