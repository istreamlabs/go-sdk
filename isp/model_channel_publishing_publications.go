/*
 * iStreamPlanet Channels API
 *
 * API version: 0.0.0
 * Contact: support@istreamplanet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// ChannelPublishingPublications struct for ChannelPublishingPublications
type ChannelPublishingPublications struct {
	// Optionally specify which audio encoders should be used for this publication. If none are specified, all audio encoders configured for the transcoder will be used.
	AudioEncoderIds *[]string `json:"audio_encoder_ids,omitempty"`
	// Create VODs for all publish points in this publication. Note that Live2VOD must also be configured for the parent |Channel|.
	CreateVods *bool `json:"create_vods,omitempty"`
	Dash *ChannelPublishingDash `json:"dash,omitempty"`
	// Optionally specify which DRMs to advertise in the playlist. If specified, this must be a subset of the DRMs specified by the packager associated with this publication. If omitted or empty, all DRMs specified by the packager will be advertised. This setting can only be used for HLS playlists.
	Drms *[]string `json:"drms,omitempty"`
	// DVR window is the max sum(duration of media segments) that will be kept in a manifest at a given time in seconds. The max supported DVR window is 10 hours.
	DvrWindowSecs *int32 `json:"dvr_window_secs,omitempty"`
	Hls *ChannelPublishingHls `json:"hls,omitempty"`
	// List of video encoder IDs that should have I-Frame only playlists generated for them.
	IframeOnlyEncoderIds *[]string `json:"iframe_only_encoder_ids,omitempty"`
	// Optional master manifest name. When not supplied a default of 'master' will be used.
	MasterPlaylistName *string `json:"master_playlist_name,omitempty"`
	// Determines how segments in this publication are packaged. Must reference a packager in 'packaging.packagers'. However, if this is a playlist-only publication (i.e. contains publish points that specify 'playlist_only_for'), this must remain unset as the packager will be inferred from the publication this one is providing playlists for.
	PackagerId *string `json:"packager_id,omitempty"`
	// Publish points specify where to output.
	PublishPoints *[]ChannelPublishingPublishPoints `json:"publish_points,omitempty"`
	// When redundant publishing is enabled succeeding to publish a given media segment to at least one HTTPPublishPoint in publish_points will result in that segment showing up in manifests as playable content. Will require at least two publish_points defined within the same publication.
	RedundantPublishing *bool `json:"redundant_publishing,omitempty"`
	// Optional: Specify what thumbnail_encoders should be in this Publication
	ThumbnailEncoderIds *[]string `json:"thumbnail_encoder_ids,omitempty"`
	// Optional, indicates whether we should pad the bitrate (false) or use what is explicitly provided (true)
	UseStrictBitrate *bool `json:"use_strict_bitrate,omitempty"`
	// Optionally specify which video encoders should be used for this publication. If none are specified, all video encoders configured for the transcoder will be used.
	VideoEncoderIds *[]string `json:"video_encoder_ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChannelPublishingPublications ChannelPublishingPublications

// NewChannelPublishingPublications instantiates a new ChannelPublishingPublications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelPublishingPublications() *ChannelPublishingPublications {
	this := ChannelPublishingPublications{}
	return &this
}

// NewChannelPublishingPublicationsWithDefaults instantiates a new ChannelPublishingPublications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelPublishingPublicationsWithDefaults() *ChannelPublishingPublications {
	this := ChannelPublishingPublications{}
	return &this
}

// GetAudioEncoderIds returns the AudioEncoderIds field value if set, zero value otherwise.
func (o *ChannelPublishingPublications) GetAudioEncoderIds() []string {
	if o == nil || o.AudioEncoderIds == nil {
		var ret []string
		return ret
	}
	return *o.AudioEncoderIds
}

// GetAudioEncoderIdsOk returns a tuple with the AudioEncoderIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublications) GetAudioEncoderIdsOk() (*[]string, bool) {
	if o == nil || o.AudioEncoderIds == nil {
		return nil, false
	}
	return o.AudioEncoderIds, true
}

// HasAudioEncoderIds returns a boolean if a field has been set.
func (o *ChannelPublishingPublications) HasAudioEncoderIds() bool {
	if o != nil && o.AudioEncoderIds != nil {
		return true
	}

	return false
}

// SetAudioEncoderIds gets a reference to the given []string and assigns it to the AudioEncoderIds field.
func (o *ChannelPublishingPublications) SetAudioEncoderIds(v []string) {
	o.AudioEncoderIds = &v
}

// GetCreateVods returns the CreateVods field value if set, zero value otherwise.
func (o *ChannelPublishingPublications) GetCreateVods() bool {
	if o == nil || o.CreateVods == nil {
		var ret bool
		return ret
	}
	return *o.CreateVods
}

// GetCreateVodsOk returns a tuple with the CreateVods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublications) GetCreateVodsOk() (*bool, bool) {
	if o == nil || o.CreateVods == nil {
		return nil, false
	}
	return o.CreateVods, true
}

// HasCreateVods returns a boolean if a field has been set.
func (o *ChannelPublishingPublications) HasCreateVods() bool {
	if o != nil && o.CreateVods != nil {
		return true
	}

	return false
}

// SetCreateVods gets a reference to the given bool and assigns it to the CreateVods field.
func (o *ChannelPublishingPublications) SetCreateVods(v bool) {
	o.CreateVods = &v
}

// GetDash returns the Dash field value if set, zero value otherwise.
func (o *ChannelPublishingPublications) GetDash() ChannelPublishingDash {
	if o == nil || o.Dash == nil {
		var ret ChannelPublishingDash
		return ret
	}
	return *o.Dash
}

// GetDashOk returns a tuple with the Dash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublications) GetDashOk() (*ChannelPublishingDash, bool) {
	if o == nil || o.Dash == nil {
		return nil, false
	}
	return o.Dash, true
}

// HasDash returns a boolean if a field has been set.
func (o *ChannelPublishingPublications) HasDash() bool {
	if o != nil && o.Dash != nil {
		return true
	}

	return false
}

// SetDash gets a reference to the given ChannelPublishingDash and assigns it to the Dash field.
func (o *ChannelPublishingPublications) SetDash(v ChannelPublishingDash) {
	o.Dash = &v
}

// GetDrms returns the Drms field value if set, zero value otherwise.
func (o *ChannelPublishingPublications) GetDrms() []string {
	if o == nil || o.Drms == nil {
		var ret []string
		return ret
	}
	return *o.Drms
}

// GetDrmsOk returns a tuple with the Drms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublications) GetDrmsOk() (*[]string, bool) {
	if o == nil || o.Drms == nil {
		return nil, false
	}
	return o.Drms, true
}

// HasDrms returns a boolean if a field has been set.
func (o *ChannelPublishingPublications) HasDrms() bool {
	if o != nil && o.Drms != nil {
		return true
	}

	return false
}

// SetDrms gets a reference to the given []string and assigns it to the Drms field.
func (o *ChannelPublishingPublications) SetDrms(v []string) {
	o.Drms = &v
}

// GetDvrWindowSecs returns the DvrWindowSecs field value if set, zero value otherwise.
func (o *ChannelPublishingPublications) GetDvrWindowSecs() int32 {
	if o == nil || o.DvrWindowSecs == nil {
		var ret int32
		return ret
	}
	return *o.DvrWindowSecs
}

// GetDvrWindowSecsOk returns a tuple with the DvrWindowSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublications) GetDvrWindowSecsOk() (*int32, bool) {
	if o == nil || o.DvrWindowSecs == nil {
		return nil, false
	}
	return o.DvrWindowSecs, true
}

// HasDvrWindowSecs returns a boolean if a field has been set.
func (o *ChannelPublishingPublications) HasDvrWindowSecs() bool {
	if o != nil && o.DvrWindowSecs != nil {
		return true
	}

	return false
}

// SetDvrWindowSecs gets a reference to the given int32 and assigns it to the DvrWindowSecs field.
func (o *ChannelPublishingPublications) SetDvrWindowSecs(v int32) {
	o.DvrWindowSecs = &v
}

// GetHls returns the Hls field value if set, zero value otherwise.
func (o *ChannelPublishingPublications) GetHls() ChannelPublishingHls {
	if o == nil || o.Hls == nil {
		var ret ChannelPublishingHls
		return ret
	}
	return *o.Hls
}

// GetHlsOk returns a tuple with the Hls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublications) GetHlsOk() (*ChannelPublishingHls, bool) {
	if o == nil || o.Hls == nil {
		return nil, false
	}
	return o.Hls, true
}

// HasHls returns a boolean if a field has been set.
func (o *ChannelPublishingPublications) HasHls() bool {
	if o != nil && o.Hls != nil {
		return true
	}

	return false
}

// SetHls gets a reference to the given ChannelPublishingHls and assigns it to the Hls field.
func (o *ChannelPublishingPublications) SetHls(v ChannelPublishingHls) {
	o.Hls = &v
}

// GetIframeOnlyEncoderIds returns the IframeOnlyEncoderIds field value if set, zero value otherwise.
func (o *ChannelPublishingPublications) GetIframeOnlyEncoderIds() []string {
	if o == nil || o.IframeOnlyEncoderIds == nil {
		var ret []string
		return ret
	}
	return *o.IframeOnlyEncoderIds
}

// GetIframeOnlyEncoderIdsOk returns a tuple with the IframeOnlyEncoderIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublications) GetIframeOnlyEncoderIdsOk() (*[]string, bool) {
	if o == nil || o.IframeOnlyEncoderIds == nil {
		return nil, false
	}
	return o.IframeOnlyEncoderIds, true
}

// HasIframeOnlyEncoderIds returns a boolean if a field has been set.
func (o *ChannelPublishingPublications) HasIframeOnlyEncoderIds() bool {
	if o != nil && o.IframeOnlyEncoderIds != nil {
		return true
	}

	return false
}

// SetIframeOnlyEncoderIds gets a reference to the given []string and assigns it to the IframeOnlyEncoderIds field.
func (o *ChannelPublishingPublications) SetIframeOnlyEncoderIds(v []string) {
	o.IframeOnlyEncoderIds = &v
}

// GetMasterPlaylistName returns the MasterPlaylistName field value if set, zero value otherwise.
func (o *ChannelPublishingPublications) GetMasterPlaylistName() string {
	if o == nil || o.MasterPlaylistName == nil {
		var ret string
		return ret
	}
	return *o.MasterPlaylistName
}

// GetMasterPlaylistNameOk returns a tuple with the MasterPlaylistName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublications) GetMasterPlaylistNameOk() (*string, bool) {
	if o == nil || o.MasterPlaylistName == nil {
		return nil, false
	}
	return o.MasterPlaylistName, true
}

// HasMasterPlaylistName returns a boolean if a field has been set.
func (o *ChannelPublishingPublications) HasMasterPlaylistName() bool {
	if o != nil && o.MasterPlaylistName != nil {
		return true
	}

	return false
}

// SetMasterPlaylistName gets a reference to the given string and assigns it to the MasterPlaylistName field.
func (o *ChannelPublishingPublications) SetMasterPlaylistName(v string) {
	o.MasterPlaylistName = &v
}

// GetPackagerId returns the PackagerId field value if set, zero value otherwise.
func (o *ChannelPublishingPublications) GetPackagerId() string {
	if o == nil || o.PackagerId == nil {
		var ret string
		return ret
	}
	return *o.PackagerId
}

// GetPackagerIdOk returns a tuple with the PackagerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublications) GetPackagerIdOk() (*string, bool) {
	if o == nil || o.PackagerId == nil {
		return nil, false
	}
	return o.PackagerId, true
}

// HasPackagerId returns a boolean if a field has been set.
func (o *ChannelPublishingPublications) HasPackagerId() bool {
	if o != nil && o.PackagerId != nil {
		return true
	}

	return false
}

// SetPackagerId gets a reference to the given string and assigns it to the PackagerId field.
func (o *ChannelPublishingPublications) SetPackagerId(v string) {
	o.PackagerId = &v
}

// GetPublishPoints returns the PublishPoints field value if set, zero value otherwise.
func (o *ChannelPublishingPublications) GetPublishPoints() []ChannelPublishingPublishPoints {
	if o == nil || o.PublishPoints == nil {
		var ret []ChannelPublishingPublishPoints
		return ret
	}
	return *o.PublishPoints
}

// GetPublishPointsOk returns a tuple with the PublishPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublications) GetPublishPointsOk() (*[]ChannelPublishingPublishPoints, bool) {
	if o == nil || o.PublishPoints == nil {
		return nil, false
	}
	return o.PublishPoints, true
}

// HasPublishPoints returns a boolean if a field has been set.
func (o *ChannelPublishingPublications) HasPublishPoints() bool {
	if o != nil && o.PublishPoints != nil {
		return true
	}

	return false
}

// SetPublishPoints gets a reference to the given []ChannelPublishingPublishPoints and assigns it to the PublishPoints field.
func (o *ChannelPublishingPublications) SetPublishPoints(v []ChannelPublishingPublishPoints) {
	o.PublishPoints = &v
}

// GetRedundantPublishing returns the RedundantPublishing field value if set, zero value otherwise.
func (o *ChannelPublishingPublications) GetRedundantPublishing() bool {
	if o == nil || o.RedundantPublishing == nil {
		var ret bool
		return ret
	}
	return *o.RedundantPublishing
}

// GetRedundantPublishingOk returns a tuple with the RedundantPublishing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublications) GetRedundantPublishingOk() (*bool, bool) {
	if o == nil || o.RedundantPublishing == nil {
		return nil, false
	}
	return o.RedundantPublishing, true
}

// HasRedundantPublishing returns a boolean if a field has been set.
func (o *ChannelPublishingPublications) HasRedundantPublishing() bool {
	if o != nil && o.RedundantPublishing != nil {
		return true
	}

	return false
}

// SetRedundantPublishing gets a reference to the given bool and assigns it to the RedundantPublishing field.
func (o *ChannelPublishingPublications) SetRedundantPublishing(v bool) {
	o.RedundantPublishing = &v
}

// GetThumbnailEncoderIds returns the ThumbnailEncoderIds field value if set, zero value otherwise.
func (o *ChannelPublishingPublications) GetThumbnailEncoderIds() []string {
	if o == nil || o.ThumbnailEncoderIds == nil {
		var ret []string
		return ret
	}
	return *o.ThumbnailEncoderIds
}

// GetThumbnailEncoderIdsOk returns a tuple with the ThumbnailEncoderIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublications) GetThumbnailEncoderIdsOk() (*[]string, bool) {
	if o == nil || o.ThumbnailEncoderIds == nil {
		return nil, false
	}
	return o.ThumbnailEncoderIds, true
}

// HasThumbnailEncoderIds returns a boolean if a field has been set.
func (o *ChannelPublishingPublications) HasThumbnailEncoderIds() bool {
	if o != nil && o.ThumbnailEncoderIds != nil {
		return true
	}

	return false
}

// SetThumbnailEncoderIds gets a reference to the given []string and assigns it to the ThumbnailEncoderIds field.
func (o *ChannelPublishingPublications) SetThumbnailEncoderIds(v []string) {
	o.ThumbnailEncoderIds = &v
}

// GetUseStrictBitrate returns the UseStrictBitrate field value if set, zero value otherwise.
func (o *ChannelPublishingPublications) GetUseStrictBitrate() bool {
	if o == nil || o.UseStrictBitrate == nil {
		var ret bool
		return ret
	}
	return *o.UseStrictBitrate
}

// GetUseStrictBitrateOk returns a tuple with the UseStrictBitrate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublications) GetUseStrictBitrateOk() (*bool, bool) {
	if o == nil || o.UseStrictBitrate == nil {
		return nil, false
	}
	return o.UseStrictBitrate, true
}

// HasUseStrictBitrate returns a boolean if a field has been set.
func (o *ChannelPublishingPublications) HasUseStrictBitrate() bool {
	if o != nil && o.UseStrictBitrate != nil {
		return true
	}

	return false
}

// SetUseStrictBitrate gets a reference to the given bool and assigns it to the UseStrictBitrate field.
func (o *ChannelPublishingPublications) SetUseStrictBitrate(v bool) {
	o.UseStrictBitrate = &v
}

// GetVideoEncoderIds returns the VideoEncoderIds field value if set, zero value otherwise.
func (o *ChannelPublishingPublications) GetVideoEncoderIds() []string {
	if o == nil || o.VideoEncoderIds == nil {
		var ret []string
		return ret
	}
	return *o.VideoEncoderIds
}

// GetVideoEncoderIdsOk returns a tuple with the VideoEncoderIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelPublishingPublications) GetVideoEncoderIdsOk() (*[]string, bool) {
	if o == nil || o.VideoEncoderIds == nil {
		return nil, false
	}
	return o.VideoEncoderIds, true
}

// HasVideoEncoderIds returns a boolean if a field has been set.
func (o *ChannelPublishingPublications) HasVideoEncoderIds() bool {
	if o != nil && o.VideoEncoderIds != nil {
		return true
	}

	return false
}

// SetVideoEncoderIds gets a reference to the given []string and assigns it to the VideoEncoderIds field.
func (o *ChannelPublishingPublications) SetVideoEncoderIds(v []string) {
	o.VideoEncoderIds = &v
}

func (o ChannelPublishingPublications) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AudioEncoderIds != nil {
		toSerialize["audio_encoder_ids"] = o.AudioEncoderIds
	}
	if o.CreateVods != nil {
		toSerialize["create_vods"] = o.CreateVods
	}
	if o.Dash != nil {
		toSerialize["dash"] = o.Dash
	}
	if o.Drms != nil {
		toSerialize["drms"] = o.Drms
	}
	if o.DvrWindowSecs != nil {
		toSerialize["dvr_window_secs"] = o.DvrWindowSecs
	}
	if o.Hls != nil {
		toSerialize["hls"] = o.Hls
	}
	if o.IframeOnlyEncoderIds != nil {
		toSerialize["iframe_only_encoder_ids"] = o.IframeOnlyEncoderIds
	}
	if o.MasterPlaylistName != nil {
		toSerialize["master_playlist_name"] = o.MasterPlaylistName
	}
	if o.PackagerId != nil {
		toSerialize["packager_id"] = o.PackagerId
	}
	if o.PublishPoints != nil {
		toSerialize["publish_points"] = o.PublishPoints
	}
	if o.RedundantPublishing != nil {
		toSerialize["redundant_publishing"] = o.RedundantPublishing
	}
	if o.ThumbnailEncoderIds != nil {
		toSerialize["thumbnail_encoder_ids"] = o.ThumbnailEncoderIds
	}
	if o.UseStrictBitrate != nil {
		toSerialize["use_strict_bitrate"] = o.UseStrictBitrate
	}
	if o.VideoEncoderIds != nil {
		toSerialize["video_encoder_ids"] = o.VideoEncoderIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ChannelPublishingPublications) UnmarshalJSON(bytes []byte) (err error) {
	varChannelPublishingPublications := _ChannelPublishingPublications{}

	if err = json.Unmarshal(bytes, &varChannelPublishingPublications); err == nil {
		*o = ChannelPublishingPublications(varChannelPublishingPublications)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "audio_encoder_ids")
		delete(additionalProperties, "create_vods")
		delete(additionalProperties, "dash")
		delete(additionalProperties, "drms")
		delete(additionalProperties, "dvr_window_secs")
		delete(additionalProperties, "hls")
		delete(additionalProperties, "iframe_only_encoder_ids")
		delete(additionalProperties, "master_playlist_name")
		delete(additionalProperties, "packager_id")
		delete(additionalProperties, "publish_points")
		delete(additionalProperties, "redundant_publishing")
		delete(additionalProperties, "thumbnail_encoder_ids")
		delete(additionalProperties, "use_strict_bitrate")
		delete(additionalProperties, "video_encoder_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChannelPublishingPublications struct {
	value *ChannelPublishingPublications
	isSet bool
}

func (v NullableChannelPublishingPublications) Get() *ChannelPublishingPublications {
	return v.value
}

func (v *NullableChannelPublishingPublications) Set(val *ChannelPublishingPublications) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelPublishingPublications) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelPublishingPublications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelPublishingPublications(val *ChannelPublishingPublications) *NullableChannelPublishingPublications {
	return &NullableChannelPublishingPublications{value: val, isSet: true}
}

func (v NullableChannelPublishingPublications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelPublishingPublications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


