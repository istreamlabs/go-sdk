/*
 * iStreamPlanet Slate Management API
 *
 * API version: v1.3.38
 * Contact: support@istreamplanet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package isp

import (
	"encoding/json"
)

// checks if the SlateWithoutID type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SlateWithoutID{}

// SlateWithoutID struct for SlateWithoutID
type SlateWithoutID struct {
	// An optional URL to a JSON Schema document describing this resource
	Schema *string `json:"$schema,omitempty" format:"uri" doc:"An optional URL to a JSON Schema document describing this resource"`
	// A friendly slate description.
	Description string `json:"description" doc:"A friendly slate description."`
	// The url where the slate can be accessed. Must be a valid URL
	Url string `json:"url" doc:"The url where the slate can be accessed. Must be a valid URL"`
}

// NewSlateWithoutID instantiates a new SlateWithoutID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlateWithoutID(description string, url string) *SlateWithoutID {
	this := SlateWithoutID{}
	this.Description = description
	this.Url = url
	return &this
}

// NewSlateWithoutIDWithDefaults instantiates a new SlateWithoutID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlateWithoutIDWithDefaults() *SlateWithoutID {
	this := SlateWithoutID{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *SlateWithoutID) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlateWithoutID) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *SlateWithoutID) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *SlateWithoutID) SetSchema(v string) {
	o.Schema = &v
}

// GetDescription returns the Description field value
func (o *SlateWithoutID) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *SlateWithoutID) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *SlateWithoutID) SetDescription(v string) {
	o.Description = v
}

// GetUrl returns the Url field value
func (o *SlateWithoutID) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SlateWithoutID) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SlateWithoutID) SetUrl(v string) {
	o.Url = v
}

func (o SlateWithoutID) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SlateWithoutID) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["$schema"] = o.Schema
	}
	toSerialize["description"] = o.Description
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

type NullableSlateWithoutID struct {
	value *SlateWithoutID
	isSet bool
}

func (v NullableSlateWithoutID) Get() *SlateWithoutID {
	return v.value
}

func (v *NullableSlateWithoutID) Set(val *SlateWithoutID) {
	v.value = val
	v.isSet = true
}

func (v NullableSlateWithoutID) IsSet() bool {
	return v.isSet
}

func (v *NullableSlateWithoutID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlateWithoutID(val *SlateWithoutID) *NullableSlateWithoutID {
	return &NullableSlateWithoutID{value: val, isSet: true}
}

func (v NullableSlateWithoutID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlateWithoutID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


